# coding: utf-8

"""
    AVACloud API 1.52.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.52.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from avacloud_client_python.api_client import ApiClient


class GaebConversionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def gaeb_conversion_convert_to_ava(self, **kwargs):  # noqa: E501
        """Converts GAEB files to Dangl.AVA projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gaeb_conversion_convert_to_ava(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file gaeb_file: The input file
        :param bool support_skipped_item_number_levels_in_positions: Defaults to 'false'. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just '01.02', then it will be displayed as '01.__.02' if this is set to true.
        :param bool remove_plain_text_long_texts: If set to true, plain text long texts will be removed from the output to reduce response sizes
        :param bool remove_html_long_texts: If set to true, html long texts will be removed from the output to reduce response sizes
        :param bool output_html_as_xml: Defaults to 'false'. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce '<br />' instead of '<br>'.
        :param bool keep_empty_html_text: Defaults to 'false'. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output.
        :param bool allow_upper_case_item_numbers: Defaults to 'false'. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well.
        :param bool allow_lump_sum_items_with_differing_quantities: Defaults to 'false'. By default, the GAEB standard requires lump sum items ('Pauschalpositionen' in German) to have a quantity of exactly 1. AVACloud does enforce this convention, but if you set this property to 'true', then differing quantities will be kept during the import.
        :return: ProjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gaeb_conversion_convert_to_ava_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.gaeb_conversion_convert_to_ava_with_http_info(**kwargs)  # noqa: E501
            return data

    def gaeb_conversion_convert_to_ava_with_http_info(self, **kwargs):  # noqa: E501
        """Converts GAEB files to Dangl.AVA projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gaeb_conversion_convert_to_ava_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file gaeb_file: The input file
        :param bool support_skipped_item_number_levels_in_positions: Defaults to 'false'. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just '01.02', then it will be displayed as '01.__.02' if this is set to true.
        :param bool remove_plain_text_long_texts: If set to true, plain text long texts will be removed from the output to reduce response sizes
        :param bool remove_html_long_texts: If set to true, html long texts will be removed from the output to reduce response sizes
        :param bool output_html_as_xml: Defaults to 'false'. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce '<br />' instead of '<br>'.
        :param bool keep_empty_html_text: Defaults to 'false'. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output.
        :param bool allow_upper_case_item_numbers: Defaults to 'false'. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well.
        :param bool allow_lump_sum_items_with_differing_quantities: Defaults to 'false'. By default, the GAEB standard requires lump sum items ('Pauschalpositionen' in German) to have a quantity of exactly 1. AVACloud does enforce this convention, but if you set this property to 'true', then differing quantities will be kept during the import.
        :return: ProjectDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gaeb_file', 'support_skipped_item_number_levels_in_positions', 'remove_plain_text_long_texts', 'remove_html_long_texts', 'output_html_as_xml', 'keep_empty_html_text', 'allow_upper_case_item_numbers', 'allow_lump_sum_items_with_differing_quantities']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gaeb_conversion_convert_to_ava" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'support_skipped_item_number_levels_in_positions' in params:
            query_params.append(('SupportSkippedItemNumberLevelsInPositions', params['support_skipped_item_number_levels_in_positions']))  # noqa: E501
        if 'remove_plain_text_long_texts' in params:
            query_params.append(('RemovePlainTextLongTexts', params['remove_plain_text_long_texts']))  # noqa: E501
        if 'remove_html_long_texts' in params:
            query_params.append(('RemoveHtmlLongTexts', params['remove_html_long_texts']))  # noqa: E501
        if 'output_html_as_xml' in params:
            query_params.append(('OutputHtmlAsXml', params['output_html_as_xml']))  # noqa: E501
        if 'keep_empty_html_text' in params:
            query_params.append(('KeepEmptyHtmlText', params['keep_empty_html_text']))  # noqa: E501
        if 'allow_upper_case_item_numbers' in params:
            query_params.append(('AllowUpperCaseItemNumbers', params['allow_upper_case_item_numbers']))  # noqa: E501
        if 'allow_lump_sum_items_with_differing_quantities' in params:
            query_params.append(('AllowLumpSumItemsWithDifferingQuantities', params['allow_lump_sum_items_with_differing_quantities']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'gaeb_file' in params:
            local_var_files['gaebFile'] = params['gaeb_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.com.dangl-it.ProjectDto.v1+json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Dangl.Identity']  # noqa: E501

        return self.api_client.call_api(
            '/conversion/gaeb/ava', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gaeb_conversion_convert_to_excel(self, **kwargs):  # noqa: E501
        """Converts GAEB files to Excel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gaeb_conversion_convert_to_excel(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file gaeb_file: The input file
        :param bool support_skipped_item_number_levels_in_positions: Defaults to 'false'. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just '01.02', then it will be displayed as '01.__.02' if this is set to true.
        :param bool write_prices: Defaults to true
        :param bool write_long_texts: Defaults to true
        :param str conversion_culture: The culture that should be used for the conversion process, to have localized Excel files
        :param bool include_article_numbers: If this is enabled, then a new column will be created in the overview worksheet that contains the article numbers for positions. Article numbers will be read from 'position.commerceProperties.articleNumber'
        :param bool output_html_as_xml: Defaults to 'false'. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce '<br />' instead of '<br>'.
        :param bool keep_empty_html_text: Defaults to 'false'. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output.
        :param bool allow_upper_case_item_numbers: Defaults to 'false'. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well.
        :param bool allow_lump_sum_items_with_differing_quantities: Defaults to 'false'. By default, the GAEB standard requires lump sum items ('Pauschalpositionen' in German) to have a quantity of exactly 1. AVACloud does enforce this convention, but if you set this property to 'true', then differing quantities will be kept during the import.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gaeb_conversion_convert_to_excel_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.gaeb_conversion_convert_to_excel_with_http_info(**kwargs)  # noqa: E501
            return data

    def gaeb_conversion_convert_to_excel_with_http_info(self, **kwargs):  # noqa: E501
        """Converts GAEB files to Excel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gaeb_conversion_convert_to_excel_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file gaeb_file: The input file
        :param bool support_skipped_item_number_levels_in_positions: Defaults to 'false'. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just '01.02', then it will be displayed as '01.__.02' if this is set to true.
        :param bool write_prices: Defaults to true
        :param bool write_long_texts: Defaults to true
        :param str conversion_culture: The culture that should be used for the conversion process, to have localized Excel files
        :param bool include_article_numbers: If this is enabled, then a new column will be created in the overview worksheet that contains the article numbers for positions. Article numbers will be read from 'position.commerceProperties.articleNumber'
        :param bool output_html_as_xml: Defaults to 'false'. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce '<br />' instead of '<br>'.
        :param bool keep_empty_html_text: Defaults to 'false'. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output.
        :param bool allow_upper_case_item_numbers: Defaults to 'false'. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well.
        :param bool allow_lump_sum_items_with_differing_quantities: Defaults to 'false'. By default, the GAEB standard requires lump sum items ('Pauschalpositionen' in German) to have a quantity of exactly 1. AVACloud does enforce this convention, but if you set this property to 'true', then differing quantities will be kept during the import.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gaeb_file', 'support_skipped_item_number_levels_in_positions', 'write_prices', 'write_long_texts', 'conversion_culture', 'include_article_numbers', 'output_html_as_xml', 'keep_empty_html_text', 'allow_upper_case_item_numbers', 'allow_lump_sum_items_with_differing_quantities']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gaeb_conversion_convert_to_excel" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'support_skipped_item_number_levels_in_positions' in params:
            query_params.append(('SupportSkippedItemNumberLevelsInPositions', params['support_skipped_item_number_levels_in_positions']))  # noqa: E501
        if 'write_prices' in params:
            query_params.append(('WritePrices', params['write_prices']))  # noqa: E501
        if 'write_long_texts' in params:
            query_params.append(('WriteLongTexts', params['write_long_texts']))  # noqa: E501
        if 'conversion_culture' in params:
            query_params.append(('ConversionCulture', params['conversion_culture']))  # noqa: E501
        if 'include_article_numbers' in params:
            query_params.append(('IncludeArticleNumbers', params['include_article_numbers']))  # noqa: E501
        if 'output_html_as_xml' in params:
            query_params.append(('OutputHtmlAsXml', params['output_html_as_xml']))  # noqa: E501
        if 'keep_empty_html_text' in params:
            query_params.append(('KeepEmptyHtmlText', params['keep_empty_html_text']))  # noqa: E501
        if 'allow_upper_case_item_numbers' in params:
            query_params.append(('AllowUpperCaseItemNumbers', params['allow_upper_case_item_numbers']))  # noqa: E501
        if 'allow_lump_sum_items_with_differing_quantities' in params:
            query_params.append(('AllowLumpSumItemsWithDifferingQuantities', params['allow_lump_sum_items_with_differing_quantities']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'gaeb_file' in params:
            local_var_files['gaebFile'] = params['gaeb_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Dangl.Identity']  # noqa: E501

        return self.api_client.call_api(
            '/conversion/gaeb/excel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gaeb_conversion_convert_to_flat_ava(self, **kwargs):  # noqa: E501
        """Converts GAEB files to Dangl.AVA projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gaeb_conversion_convert_to_flat_ava(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file gaeb_file: The input file
        :param bool support_skipped_item_number_levels_in_positions: Defaults to 'false'. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just '01.02', then it will be displayed as '01.__.02' if this is set to true.
        :param bool output_html_as_xml: Defaults to 'false'. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce '<br />' instead of '<br>'.
        :param bool keep_empty_html_text: Defaults to 'false'. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output.
        :param bool allow_upper_case_item_numbers: Defaults to 'false'. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well.
        :param bool allow_lump_sum_items_with_differing_quantities: Defaults to 'false'. By default, the GAEB standard requires lump sum items ('Pauschalpositionen' in German) to have a quantity of exactly 1. AVACloud does enforce this convention, but if you set this property to 'true', then differing quantities will be kept during the import.
        :return: FlatAvaProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gaeb_conversion_convert_to_flat_ava_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.gaeb_conversion_convert_to_flat_ava_with_http_info(**kwargs)  # noqa: E501
            return data

    def gaeb_conversion_convert_to_flat_ava_with_http_info(self, **kwargs):  # noqa: E501
        """Converts GAEB files to Dangl.AVA projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gaeb_conversion_convert_to_flat_ava_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file gaeb_file: The input file
        :param bool support_skipped_item_number_levels_in_positions: Defaults to 'false'. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just '01.02', then it will be displayed as '01.__.02' if this is set to true.
        :param bool output_html_as_xml: Defaults to 'false'. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce '<br />' instead of '<br>'.
        :param bool keep_empty_html_text: Defaults to 'false'. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output.
        :param bool allow_upper_case_item_numbers: Defaults to 'false'. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well.
        :param bool allow_lump_sum_items_with_differing_quantities: Defaults to 'false'. By default, the GAEB standard requires lump sum items ('Pauschalpositionen' in German) to have a quantity of exactly 1. AVACloud does enforce this convention, but if you set this property to 'true', then differing quantities will be kept during the import.
        :return: FlatAvaProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gaeb_file', 'support_skipped_item_number_levels_in_positions', 'output_html_as_xml', 'keep_empty_html_text', 'allow_upper_case_item_numbers', 'allow_lump_sum_items_with_differing_quantities']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gaeb_conversion_convert_to_flat_ava" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'support_skipped_item_number_levels_in_positions' in params:
            query_params.append(('SupportSkippedItemNumberLevelsInPositions', params['support_skipped_item_number_levels_in_positions']))  # noqa: E501
        if 'output_html_as_xml' in params:
            query_params.append(('OutputHtmlAsXml', params['output_html_as_xml']))  # noqa: E501
        if 'keep_empty_html_text' in params:
            query_params.append(('KeepEmptyHtmlText', params['keep_empty_html_text']))  # noqa: E501
        if 'allow_upper_case_item_numbers' in params:
            query_params.append(('AllowUpperCaseItemNumbers', params['allow_upper_case_item_numbers']))  # noqa: E501
        if 'allow_lump_sum_items_with_differing_quantities' in params:
            query_params.append(('AllowLumpSumItemsWithDifferingQuantities', params['allow_lump_sum_items_with_differing_quantities']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'gaeb_file' in params:
            local_var_files['gaebFile'] = params['gaeb_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Dangl.Identity']  # noqa: E501

        return self.api_client.call_api(
            '/conversion/gaeb/flat-ava', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FlatAvaProject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gaeb_conversion_convert_to_gaeb(self, **kwargs):  # noqa: E501
        """Converts GAEB files to GAEB files. Used for example when transforming or repairing GAEB files.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gaeb_conversion_convert_to_gaeb(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file gaeb_file: The input file
        :param bool support_skipped_item_number_levels_in_positions: Defaults to 'false'. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just '01.02', then it will be displayed as '01.__.02' if this is set to true.
        :param str destination_gaeb_type: Defaults to GAEB XML V3.2
        :param str target_exchange_phase_transform: Defaults to none, meaning no transformation will be done. The phases are: Base = 81 CostEstimate = 82 OfferRequest = 83 Offer = 84 SideOffer = 85 Grant = 86
        :param bool enforce_strict_offer_phase_long_text_output: Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export.
        :param bool export_quantity_determination: Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the 'QtyDeterm' (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the 'QuantityComponents' property of positions. Please see the entry for 'Quantity Determination' in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the 'QuantityComponents' property.
        :param bool remove_unprintable_characters_from_texts: If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true.
        :param bool force_include_descriptions: If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions.
        :param bool treat_null_item_number_schema_as_invalid: When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons.
        :param bool output_html_as_xml: Defaults to 'false'. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce '<br />' instead of '<br>'.
        :param bool keep_empty_html_text: Defaults to 'false'. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output.
        :param bool allow_upper_case_item_numbers: Defaults to 'false'. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well.
        :param bool allow_lump_sum_items_with_differing_quantities: Defaults to 'false'. By default, the GAEB standard requires lump sum items ('Pauschalpositionen' in German) to have a quantity of exactly 1. AVACloud does enforce this convention, but if you set this property to 'true', then differing quantities will be kept during the import.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gaeb_conversion_convert_to_gaeb_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.gaeb_conversion_convert_to_gaeb_with_http_info(**kwargs)  # noqa: E501
            return data

    def gaeb_conversion_convert_to_gaeb_with_http_info(self, **kwargs):  # noqa: E501
        """Converts GAEB files to GAEB files. Used for example when transforming or repairing GAEB files.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gaeb_conversion_convert_to_gaeb_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file gaeb_file: The input file
        :param bool support_skipped_item_number_levels_in_positions: Defaults to 'false'. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just '01.02', then it will be displayed as '01.__.02' if this is set to true.
        :param str destination_gaeb_type: Defaults to GAEB XML V3.2
        :param str target_exchange_phase_transform: Defaults to none, meaning no transformation will be done. The phases are: Base = 81 CostEstimate = 82 OfferRequest = 83 Offer = 84 SideOffer = 85 Grant = 86
        :param bool enforce_strict_offer_phase_long_text_output: Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export.
        :param bool export_quantity_determination: Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the 'QtyDeterm' (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the 'QuantityComponents' property of positions. Please see the entry for 'Quantity Determination' in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the 'QuantityComponents' property.
        :param bool remove_unprintable_characters_from_texts: If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true.
        :param bool force_include_descriptions: If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions.
        :param bool treat_null_item_number_schema_as_invalid: When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons.
        :param bool output_html_as_xml: Defaults to 'false'. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce '<br />' instead of '<br>'.
        :param bool keep_empty_html_text: Defaults to 'false'. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output.
        :param bool allow_upper_case_item_numbers: Defaults to 'false'. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well.
        :param bool allow_lump_sum_items_with_differing_quantities: Defaults to 'false'. By default, the GAEB standard requires lump sum items ('Pauschalpositionen' in German) to have a quantity of exactly 1. AVACloud does enforce this convention, but if you set this property to 'true', then differing quantities will be kept during the import.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gaeb_file', 'support_skipped_item_number_levels_in_positions', 'destination_gaeb_type', 'target_exchange_phase_transform', 'enforce_strict_offer_phase_long_text_output', 'export_quantity_determination', 'remove_unprintable_characters_from_texts', 'force_include_descriptions', 'treat_null_item_number_schema_as_invalid', 'output_html_as_xml', 'keep_empty_html_text', 'allow_upper_case_item_numbers', 'allow_lump_sum_items_with_differing_quantities']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gaeb_conversion_convert_to_gaeb" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'support_skipped_item_number_levels_in_positions' in params:
            query_params.append(('SupportSkippedItemNumberLevelsInPositions', params['support_skipped_item_number_levels_in_positions']))  # noqa: E501
        if 'destination_gaeb_type' in params:
            query_params.append(('DestinationGaebType', params['destination_gaeb_type']))  # noqa: E501
        if 'target_exchange_phase_transform' in params:
            query_params.append(('TargetExchangePhaseTransform', params['target_exchange_phase_transform']))  # noqa: E501
        if 'enforce_strict_offer_phase_long_text_output' in params:
            query_params.append(('EnforceStrictOfferPhaseLongTextOutput', params['enforce_strict_offer_phase_long_text_output']))  # noqa: E501
        if 'export_quantity_determination' in params:
            query_params.append(('ExportQuantityDetermination', params['export_quantity_determination']))  # noqa: E501
        if 'remove_unprintable_characters_from_texts' in params:
            query_params.append(('RemoveUnprintableCharactersFromTexts', params['remove_unprintable_characters_from_texts']))  # noqa: E501
        if 'force_include_descriptions' in params:
            query_params.append(('ForceIncludeDescriptions', params['force_include_descriptions']))  # noqa: E501
        if 'treat_null_item_number_schema_as_invalid' in params:
            query_params.append(('TreatNullItemNumberSchemaAsInvalid', params['treat_null_item_number_schema_as_invalid']))  # noqa: E501
        if 'output_html_as_xml' in params:
            query_params.append(('OutputHtmlAsXml', params['output_html_as_xml']))  # noqa: E501
        if 'keep_empty_html_text' in params:
            query_params.append(('KeepEmptyHtmlText', params['keep_empty_html_text']))  # noqa: E501
        if 'allow_upper_case_item_numbers' in params:
            query_params.append(('AllowUpperCaseItemNumbers', params['allow_upper_case_item_numbers']))  # noqa: E501
        if 'allow_lump_sum_items_with_differing_quantities' in params:
            query_params.append(('AllowLumpSumItemsWithDifferingQuantities', params['allow_lump_sum_items_with_differing_quantities']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'gaeb_file' in params:
            local_var_files['gaebFile'] = params['gaeb_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Dangl.Identity']  # noqa: E501

        return self.api_client.call_api(
            '/conversion/gaeb/gaeb', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gaeb_conversion_convert_to_oenorm(self, **kwargs):  # noqa: E501
        """Converts GAEB files to Oenorm files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gaeb_conversion_convert_to_oenorm(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file gaeb_file: The input file
        :param bool support_skipped_item_number_levels_in_positions: Defaults to 'false'. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just '01.02', then it will be displayed as '01.__.02' if this is set to true.
        :param str destination_oenorm_type: Defaults to Lv2015
        :param bool try_repair_project_structure: Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target
        :param bool skip_try_enforce_schema_compliant_xml_output: If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option.
        :param bool remove_unprintable_characters_from_texts: If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true.
        :param bool output_html_as_xml: Defaults to 'false'. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce '<br />' instead of '<br>'.
        :param bool keep_empty_html_text: Defaults to 'false'. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output.
        :param bool allow_upper_case_item_numbers: Defaults to 'false'. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well.
        :param bool allow_lump_sum_items_with_differing_quantities: Defaults to 'false'. By default, the GAEB standard requires lump sum items ('Pauschalpositionen' in German) to have a quantity of exactly 1. AVACloud does enforce this convention, but if you set this property to 'true', then differing quantities will be kept during the import.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gaeb_conversion_convert_to_oenorm_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.gaeb_conversion_convert_to_oenorm_with_http_info(**kwargs)  # noqa: E501
            return data

    def gaeb_conversion_convert_to_oenorm_with_http_info(self, **kwargs):  # noqa: E501
        """Converts GAEB files to Oenorm files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gaeb_conversion_convert_to_oenorm_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file gaeb_file: The input file
        :param bool support_skipped_item_number_levels_in_positions: Defaults to 'false'. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just '01.02', then it will be displayed as '01.__.02' if this is set to true.
        :param str destination_oenorm_type: Defaults to Lv2015
        :param bool try_repair_project_structure: Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target
        :param bool skip_try_enforce_schema_compliant_xml_output: If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option.
        :param bool remove_unprintable_characters_from_texts: If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true.
        :param bool output_html_as_xml: Defaults to 'false'. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce '<br />' instead of '<br>'.
        :param bool keep_empty_html_text: Defaults to 'false'. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output.
        :param bool allow_upper_case_item_numbers: Defaults to 'false'. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well.
        :param bool allow_lump_sum_items_with_differing_quantities: Defaults to 'false'. By default, the GAEB standard requires lump sum items ('Pauschalpositionen' in German) to have a quantity of exactly 1. AVACloud does enforce this convention, but if you set this property to 'true', then differing quantities will be kept during the import.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gaeb_file', 'support_skipped_item_number_levels_in_positions', 'destination_oenorm_type', 'try_repair_project_structure', 'skip_try_enforce_schema_compliant_xml_output', 'remove_unprintable_characters_from_texts', 'output_html_as_xml', 'keep_empty_html_text', 'allow_upper_case_item_numbers', 'allow_lump_sum_items_with_differing_quantities']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gaeb_conversion_convert_to_oenorm" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'support_skipped_item_number_levels_in_positions' in params:
            query_params.append(('SupportSkippedItemNumberLevelsInPositions', params['support_skipped_item_number_levels_in_positions']))  # noqa: E501
        if 'destination_oenorm_type' in params:
            query_params.append(('DestinationOenormType', params['destination_oenorm_type']))  # noqa: E501
        if 'try_repair_project_structure' in params:
            query_params.append(('TryRepairProjectStructure', params['try_repair_project_structure']))  # noqa: E501
        if 'skip_try_enforce_schema_compliant_xml_output' in params:
            query_params.append(('SkipTryEnforceSchemaCompliantXmlOutput', params['skip_try_enforce_schema_compliant_xml_output']))  # noqa: E501
        if 'remove_unprintable_characters_from_texts' in params:
            query_params.append(('RemoveUnprintableCharactersFromTexts', params['remove_unprintable_characters_from_texts']))  # noqa: E501
        if 'output_html_as_xml' in params:
            query_params.append(('OutputHtmlAsXml', params['output_html_as_xml']))  # noqa: E501
        if 'keep_empty_html_text' in params:
            query_params.append(('KeepEmptyHtmlText', params['keep_empty_html_text']))  # noqa: E501
        if 'allow_upper_case_item_numbers' in params:
            query_params.append(('AllowUpperCaseItemNumbers', params['allow_upper_case_item_numbers']))  # noqa: E501
        if 'allow_lump_sum_items_with_differing_quantities' in params:
            query_params.append(('AllowLumpSumItemsWithDifferingQuantities', params['allow_lump_sum_items_with_differing_quantities']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'gaeb_file' in params:
            local_var_files['gaebFile'] = params['gaeb_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Dangl.Identity']  # noqa: E501

        return self.api_client.call_api(
            '/conversion/gaeb/oenorm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
