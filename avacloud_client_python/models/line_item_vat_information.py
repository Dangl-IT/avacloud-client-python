# coding: utf-8

"""
    AVACloud API 1.52.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.52.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class LineItemVatInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vat_category': 'VatCategory',
        'vat_rate': 'float'
    }

    attribute_map = {
        'vat_category': 'vatCategory',
        'vat_rate': 'vatRate'
    }

    def __init__(self, vat_category=None, vat_rate=None, _configuration=None):  # noqa: E501
        """LineItemVatInformation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._vat_category = None
        self._vat_rate = None
        self.discriminator = None

        self.vat_category = vat_category
        if vat_rate is not None:
            self.vat_rate = vat_rate

    @property
    def vat_category(self):
        """Gets the vat_category of this LineItemVatInformation.  # noqa: E501


        :return: The vat_category of this LineItemVatInformation.  # noqa: E501
        :rtype: VatCategory
        """
        return self._vat_category

    @vat_category.setter
    def vat_category(self, vat_category):
        """Sets the vat_category of this LineItemVatInformation.


        :param vat_category: The vat_category of this LineItemVatInformation.  # noqa: E501
        :type: VatCategory
        """
        if self._configuration.client_side_validation and vat_category is None:
            raise ValueError("Invalid value for `vat_category`, must not be `None`")  # noqa: E501

        self._vat_category = vat_category

    @property
    def vat_rate(self):
        """Gets the vat_rate of this LineItemVatInformation.  # noqa: E501


        :return: The vat_rate of this LineItemVatInformation.  # noqa: E501
        :rtype: float
        """
        return self._vat_rate

    @vat_rate.setter
    def vat_rate(self, vat_rate):
        """Sets the vat_rate of this LineItemVatInformation.


        :param vat_rate: The vat_rate of this LineItemVatInformation.  # noqa: E501
        :type: float
        """

        self._vat_rate = vat_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(LineItemVatInformation, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LineItemVatInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LineItemVatInformation):
            return True

        return self.to_dict() != other.to_dict()
