# coding: utf-8

"""
    AVACloud API 1.30.0

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.30.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class ValidationResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_schema_compliant': 'bool',
        'check_results': 'list[ValidationCheckResult]',
        'validation_type': 'ValidationType',
        'file_name': 'str'
    }

    attribute_map = {
        'is_schema_compliant': 'isSchemaCompliant',
        'check_results': 'checkResults',
        'validation_type': 'validationType',
        'file_name': 'fileName'
    }

    def __init__(self, is_schema_compliant=None, check_results=None, validation_type=None, file_name=None, _configuration=None):  # noqa: E501
        """ValidationResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_schema_compliant = None
        self._check_results = None
        self._validation_type = None
        self._file_name = None
        self.discriminator = None

        self.is_schema_compliant = is_schema_compliant
        if check_results is not None:
            self.check_results = check_results
        self.validation_type = validation_type
        if file_name is not None:
            self.file_name = file_name

    @property
    def is_schema_compliant(self):
        """Gets the is_schema_compliant of this ValidationResult.  # noqa: E501

        Indicates if the validation produced no errors  # noqa: E501

        :return: The is_schema_compliant of this ValidationResult.  # noqa: E501
        :rtype: bool
        """
        return self._is_schema_compliant

    @is_schema_compliant.setter
    def is_schema_compliant(self, is_schema_compliant):
        """Sets the is_schema_compliant of this ValidationResult.

        Indicates if the validation produced no errors  # noqa: E501

        :param is_schema_compliant: The is_schema_compliant of this ValidationResult.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_schema_compliant is None:
            raise ValueError("Invalid value for `is_schema_compliant`, must not be `None`")  # noqa: E501

        self._is_schema_compliant = is_schema_compliant

    @property
    def check_results(self):
        """Gets the check_results of this ValidationResult.  # noqa: E501

        List of validation check results, which are usually errors  # noqa: E501

        :return: The check_results of this ValidationResult.  # noqa: E501
        :rtype: list[ValidationCheckResult]
        """
        return self._check_results

    @check_results.setter
    def check_results(self, check_results):
        """Sets the check_results of this ValidationResult.

        List of validation check results, which are usually errors  # noqa: E501

        :param check_results: The check_results of this ValidationResult.  # noqa: E501
        :type: list[ValidationCheckResult]
        """

        self._check_results = check_results

    @property
    def validation_type(self):
        """Gets the validation_type of this ValidationResult.  # noqa: E501

        The type of the validation that was performed  # noqa: E501

        :return: The validation_type of this ValidationResult.  # noqa: E501
        :rtype: ValidationType
        """
        return self._validation_type

    @validation_type.setter
    def validation_type(self, validation_type):
        """Sets the validation_type of this ValidationResult.

        The type of the validation that was performed  # noqa: E501

        :param validation_type: The validation_type of this ValidationResult.  # noqa: E501
        :type: ValidationType
        """
        if self._configuration.client_side_validation and validation_type is None:
            raise ValueError("Invalid value for `validation_type`, must not be `None`")  # noqa: E501

        self._validation_type = validation_type

    @property
    def file_name(self):
        """Gets the file_name of this ValidationResult.  # noqa: E501

        Name of the validated file  # noqa: E501

        :return: The file_name of this ValidationResult.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this ValidationResult.

        Name of the validated file  # noqa: E501

        :param file_name: The file_name of this ValidationResult.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(ValidationResult, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidationResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ValidationResult):
            return True

        return self.to_dict() != other.to_dict()

