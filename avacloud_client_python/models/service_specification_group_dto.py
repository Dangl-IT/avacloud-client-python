# coding: utf-8

"""
    AVACloud API 1.52.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.52.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class ServiceSpecificationGroupDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_hourly_wage': 'float',
        'project_tax_rate': 'float',
        'project_price_components': 'list[str]',
        'project_item_number_schema': 'ItemNumberSchemaDto',
        'elements': 'list[IElementDto]',
        'project_labour_time_label': 'str',
        'contains_duplicate_item_numbers': 'bool',
        'contains_duplicate_element_ids': 'bool',
        'ignore_duplicate_item_numbers': 'bool',
        'ignore_project_catalogue_propagation': 'bool',
        'ignore_duplicate_element_ids': 'bool',
        'total_price_gross_by_tax_rate': 'list[GrossPriceComponentDto]',
        'ignore_child_price_updates': 'bool',
        'deducted_price': 'float',
        'deduction_factor': 'float',
        'absolute_deduction': 'float',
        'total_price': 'float',
        'total_price_gross': 'float',
        'total_price_gross_deducted': 'float',
        'price_type': 'PriceTypeDto',
        'short_text': 'str',
        'comission_status': 'ComissionStatusDto',
        'item_number': 'ItemNumberDto',
        'element_type': 'str',
        'is_lot': 'bool',
        'alternative_to': 'str',
        'oenorm_properties': 'OenormPropertiesDto',
        'hierarchy_level': 'int',
        'addendum_status': 'AddendumStatusDto',
        'alternative_identifier': 'int',
        'alternative_group_identifier': 'int'
    }

    attribute_map = {
        'project_hourly_wage': 'projectHourlyWage',
        'project_tax_rate': 'projectTaxRate',
        'project_price_components': 'projectPriceComponents',
        'project_item_number_schema': 'projectItemNumberSchema',
        'elements': 'elements',
        'project_labour_time_label': 'projectLabourTimeLabel',
        'contains_duplicate_item_numbers': 'containsDuplicateItemNumbers',
        'contains_duplicate_element_ids': 'containsDuplicateElementIds',
        'ignore_duplicate_item_numbers': 'ignoreDuplicateItemNumbers',
        'ignore_project_catalogue_propagation': 'ignoreProjectCataloguePropagation',
        'ignore_duplicate_element_ids': 'ignoreDuplicateElementIds',
        'total_price_gross_by_tax_rate': 'totalPriceGrossByTaxRate',
        'ignore_child_price_updates': 'ignoreChildPriceUpdates',
        'deducted_price': 'deductedPrice',
        'deduction_factor': 'deductionFactor',
        'absolute_deduction': 'absoluteDeduction',
        'total_price': 'totalPrice',
        'total_price_gross': 'totalPriceGross',
        'total_price_gross_deducted': 'totalPriceGrossDeducted',
        'price_type': 'priceType',
        'short_text': 'shortText',
        'comission_status': 'comissionStatus',
        'item_number': 'itemNumber',
        'element_type': 'elementType',
        'is_lot': 'isLot',
        'alternative_to': 'alternativeTo',
        'oenorm_properties': 'oenormProperties',
        'hierarchy_level': 'hierarchyLevel',
        'addendum_status': 'addendumStatus',
        'alternative_identifier': 'alternativeIdentifier',
        'alternative_group_identifier': 'alternativeGroupIdentifier'
    }

    def __init__(self, project_hourly_wage=None, project_tax_rate=None, project_price_components=None, project_item_number_schema=None, elements=None, project_labour_time_label=None, contains_duplicate_item_numbers=None, contains_duplicate_element_ids=None, ignore_duplicate_item_numbers=None, ignore_project_catalogue_propagation=None, ignore_duplicate_element_ids=None, total_price_gross_by_tax_rate=None, ignore_child_price_updates=None, deducted_price=None, deduction_factor=None, absolute_deduction=None, total_price=None, total_price_gross=None, total_price_gross_deducted=None, price_type=None, short_text=None, comission_status=None, item_number=None, element_type=None, is_lot=None, alternative_to=None, oenorm_properties=None, hierarchy_level=None, addendum_status=None, alternative_identifier=None, alternative_group_identifier=None, _configuration=None):  # noqa: E501
        """ServiceSpecificationGroupDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._project_hourly_wage = None
        self._project_tax_rate = None
        self._project_price_components = None
        self._project_item_number_schema = None
        self._elements = None
        self._project_labour_time_label = None
        self._contains_duplicate_item_numbers = None
        self._contains_duplicate_element_ids = None
        self._ignore_duplicate_item_numbers = None
        self._ignore_project_catalogue_propagation = None
        self._ignore_duplicate_element_ids = None
        self._total_price_gross_by_tax_rate = None
        self._ignore_child_price_updates = None
        self._deducted_price = None
        self._deduction_factor = None
        self._absolute_deduction = None
        self._total_price = None
        self._total_price_gross = None
        self._total_price_gross_deducted = None
        self._price_type = None
        self._short_text = None
        self._comission_status = None
        self._item_number = None
        self._element_type = None
        self._is_lot = None
        self._alternative_to = None
        self._oenorm_properties = None
        self._hierarchy_level = None
        self._addendum_status = None
        self._alternative_identifier = None
        self._alternative_group_identifier = None
        self.discriminator = None

        self.project_hourly_wage = project_hourly_wage
        self.project_tax_rate = project_tax_rate
        if project_price_components is not None:
            self.project_price_components = project_price_components
        if project_item_number_schema is not None:
            self.project_item_number_schema = project_item_number_schema
        if elements is not None:
            self.elements = elements
        if project_labour_time_label is not None:
            self.project_labour_time_label = project_labour_time_label
        self.contains_duplicate_item_numbers = contains_duplicate_item_numbers
        self.contains_duplicate_element_ids = contains_duplicate_element_ids
        self.ignore_duplicate_item_numbers = ignore_duplicate_item_numbers
        self.ignore_project_catalogue_propagation = ignore_project_catalogue_propagation
        self.ignore_duplicate_element_ids = ignore_duplicate_element_ids
        if total_price_gross_by_tax_rate is not None:
            self.total_price_gross_by_tax_rate = total_price_gross_by_tax_rate
        self.ignore_child_price_updates = ignore_child_price_updates
        self.deducted_price = deducted_price
        self.deduction_factor = deduction_factor
        if absolute_deduction is not None:
            self.absolute_deduction = absolute_deduction
        self.total_price = total_price
        self.total_price_gross = total_price_gross
        self.total_price_gross_deducted = total_price_gross_deducted
        self.price_type = price_type
        if short_text is not None:
            self.short_text = short_text
        self.comission_status = comission_status
        if item_number is not None:
            self.item_number = item_number
        if element_type is not None:
            self.element_type = element_type
        self.is_lot = is_lot
        if alternative_to is not None:
            self.alternative_to = alternative_to
        if oenorm_properties is not None:
            self.oenorm_properties = oenorm_properties
        self.hierarchy_level = hierarchy_level
        if addendum_status is not None:
            self.addendum_status = addendum_status
        if alternative_identifier is not None:
            self.alternative_identifier = alternative_identifier
        if alternative_group_identifier is not None:
            self.alternative_group_identifier = alternative_group_identifier

    @property
    def project_hourly_wage(self):
        """Gets the project_hourly_wage of this ServiceSpecificationGroupDto.  # noqa: E501

        The hourly wage that is used within this ElementContainerBase. Will be propagated to child elements.  # noqa: E501

        :return: The project_hourly_wage of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: float
        """
        return self._project_hourly_wage

    @project_hourly_wage.setter
    def project_hourly_wage(self, project_hourly_wage):
        """Sets the project_hourly_wage of this ServiceSpecificationGroupDto.

        The hourly wage that is used within this ElementContainerBase. Will be propagated to child elements.  # noqa: E501

        :param project_hourly_wage: The project_hourly_wage of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and project_hourly_wage is None:
            raise ValueError("Invalid value for `project_hourly_wage`, must not be `None`")  # noqa: E501

        self._project_hourly_wage = project_hourly_wage

    @property
    def project_tax_rate(self):
        """Gets the project_tax_rate of this ServiceSpecificationGroupDto.  # noqa: E501

        The tax rate that is used within this ElementContainerBase. Will be propagated to child elements.  # noqa: E501

        :return: The project_tax_rate of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: float
        """
        return self._project_tax_rate

    @project_tax_rate.setter
    def project_tax_rate(self, project_tax_rate):
        """Sets the project_tax_rate of this ServiceSpecificationGroupDto.

        The tax rate that is used within this ElementContainerBase. Will be propagated to child elements.  # noqa: E501

        :param project_tax_rate: The project_tax_rate of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and project_tax_rate is None:
            raise ValueError("Invalid value for `project_tax_rate`, must not be `None`")  # noqa: E501

        self._project_tax_rate = project_tax_rate

    @property
    def project_price_components(self):
        """Gets the project_price_components of this ServiceSpecificationGroupDto.  # noqa: E501

        The price components that are used within this project. They are ignored during Json deserialization because they will be set from the parent project.  # noqa: E501

        :return: The project_price_components of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._project_price_components

    @project_price_components.setter
    def project_price_components(self, project_price_components):
        """Sets the project_price_components of this ServiceSpecificationGroupDto.

        The price components that are used within this project. They are ignored during Json deserialization because they will be set from the parent project.  # noqa: E501

        :param project_price_components: The project_price_components of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: list[str]
        """

        self._project_price_components = project_price_components

    @property
    def project_item_number_schema(self):
        """Gets the project_item_number_schema of this ServiceSpecificationGroupDto.  # noqa: E501

        The ItemNumberSchema that is used within this project.  # noqa: E501

        :return: The project_item_number_schema of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: ItemNumberSchemaDto
        """
        return self._project_item_number_schema

    @project_item_number_schema.setter
    def project_item_number_schema(self, project_item_number_schema):
        """Sets the project_item_number_schema of this ServiceSpecificationGroupDto.

        The ItemNumberSchema that is used within this project.  # noqa: E501

        :param project_item_number_schema: The project_item_number_schema of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: ItemNumberSchemaDto
        """

        self._project_item_number_schema = project_item_number_schema

    @property
    def elements(self):
        """Gets the elements of this ServiceSpecificationGroupDto.  # noqa: E501

        The IElements within this ElementContainerBase.  # noqa: E501

        :return: The elements of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: list[IElementDto]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this ServiceSpecificationGroupDto.

        The IElements within this ElementContainerBase.  # noqa: E501

        :param elements: The elements of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: list[IElementDto]
        """

        self._elements = elements

    @property
    def project_labour_time_label(self):
        """Gets the project_labour_time_label of this ServiceSpecificationGroupDto.  # noqa: E501

        The label used in the parent Project to mark labour time, e.g. \"Hours\" or \"Stunden\".  # noqa: E501

        :return: The project_labour_time_label of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: str
        """
        return self._project_labour_time_label

    @project_labour_time_label.setter
    def project_labour_time_label(self, project_labour_time_label):
        """Sets the project_labour_time_label of this ServiceSpecificationGroupDto.

        The label used in the parent Project to mark labour time, e.g. \"Hours\" or \"Stunden\".  # noqa: E501

        :param project_labour_time_label: The project_labour_time_label of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: str
        """

        self._project_labour_time_label = project_labour_time_label

    @property
    def contains_duplicate_item_numbers(self):
        """Gets the contains_duplicate_item_numbers of this ServiceSpecificationGroupDto.  # noqa: E501

        Indicates if there are child IElements that have conflicting, duplicated ItemNumbers or if any child ElementContainerBase elements themselves contain duplicate ItemNumber s. Will always indicate false when told to ignore duplicate item numbers.  # noqa: E501

        :return: The contains_duplicate_item_numbers of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: bool
        """
        return self._contains_duplicate_item_numbers

    @contains_duplicate_item_numbers.setter
    def contains_duplicate_item_numbers(self, contains_duplicate_item_numbers):
        """Sets the contains_duplicate_item_numbers of this ServiceSpecificationGroupDto.

        Indicates if there are child IElements that have conflicting, duplicated ItemNumbers or if any child ElementContainerBase elements themselves contain duplicate ItemNumber s. Will always indicate false when told to ignore duplicate item numbers.  # noqa: E501

        :param contains_duplicate_item_numbers: The contains_duplicate_item_numbers of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and contains_duplicate_item_numbers is None:
            raise ValueError("Invalid value for `contains_duplicate_item_numbers`, must not be `None`")  # noqa: E501

        self._contains_duplicate_item_numbers = contains_duplicate_item_numbers

    @property
    def contains_duplicate_element_ids(self):
        """Gets the contains_duplicate_element_ids of this ServiceSpecificationGroupDto.  # noqa: E501

        Indicates if there are child IElements that have conflicting, duplicated Ids or if any child ElementContainerBase elements themselves contain duplicate Id s. Will always indicate false when told to ignore duplicate item numbers.  # noqa: E501

        :return: The contains_duplicate_element_ids of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: bool
        """
        return self._contains_duplicate_element_ids

    @contains_duplicate_element_ids.setter
    def contains_duplicate_element_ids(self, contains_duplicate_element_ids):
        """Sets the contains_duplicate_element_ids of this ServiceSpecificationGroupDto.

        Indicates if there are child IElements that have conflicting, duplicated Ids or if any child ElementContainerBase elements themselves contain duplicate Id s. Will always indicate false when told to ignore duplicate item numbers.  # noqa: E501

        :param contains_duplicate_element_ids: The contains_duplicate_element_ids of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and contains_duplicate_element_ids is None:
            raise ValueError("Invalid value for `contains_duplicate_element_ids`, must not be `None`")  # noqa: E501

        self._contains_duplicate_element_ids = contains_duplicate_element_ids

    @property
    def ignore_duplicate_item_numbers(self):
        """Gets the ignore_duplicate_item_numbers of this ServiceSpecificationGroupDto.  # noqa: E501

        Indicate if duplicated ItemNumbers within child elements are to be ignored. Will not perform checks for duplicates if yes.  # noqa: E501

        :return: The ignore_duplicate_item_numbers of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_duplicate_item_numbers

    @ignore_duplicate_item_numbers.setter
    def ignore_duplicate_item_numbers(self, ignore_duplicate_item_numbers):
        """Sets the ignore_duplicate_item_numbers of this ServiceSpecificationGroupDto.

        Indicate if duplicated ItemNumbers within child elements are to be ignored. Will not perform checks for duplicates if yes.  # noqa: E501

        :param ignore_duplicate_item_numbers: The ignore_duplicate_item_numbers of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and ignore_duplicate_item_numbers is None:
            raise ValueError("Invalid value for `ignore_duplicate_item_numbers`, must not be `None`")  # noqa: E501

        self._ignore_duplicate_item_numbers = ignore_duplicate_item_numbers

    @property
    def ignore_project_catalogue_propagation(self):
        """Gets the ignore_project_catalogue_propagation of this ServiceSpecificationGroupDto.  # noqa: E501

        If this is set to true, the ProjectCatalogues property will not be propagated to child elements. This is useful in mapping scenarios, where you want to disable propagation for multiple changes, and only enable it once you have mapped all properties  # noqa: E501

        :return: The ignore_project_catalogue_propagation of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_project_catalogue_propagation

    @ignore_project_catalogue_propagation.setter
    def ignore_project_catalogue_propagation(self, ignore_project_catalogue_propagation):
        """Sets the ignore_project_catalogue_propagation of this ServiceSpecificationGroupDto.

        If this is set to true, the ProjectCatalogues property will not be propagated to child elements. This is useful in mapping scenarios, where you want to disable propagation for multiple changes, and only enable it once you have mapped all properties  # noqa: E501

        :param ignore_project_catalogue_propagation: The ignore_project_catalogue_propagation of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and ignore_project_catalogue_propagation is None:
            raise ValueError("Invalid value for `ignore_project_catalogue_propagation`, must not be `None`")  # noqa: E501

        self._ignore_project_catalogue_propagation = ignore_project_catalogue_propagation

    @property
    def ignore_duplicate_element_ids(self):
        """Gets the ignore_duplicate_element_ids of this ServiceSpecificationGroupDto.  # noqa: E501

        Indicate if duplicated Ids within child elements are to be ignored. Will not perform checks for duplicates if yes.  # noqa: E501

        :return: The ignore_duplicate_element_ids of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_duplicate_element_ids

    @ignore_duplicate_element_ids.setter
    def ignore_duplicate_element_ids(self, ignore_duplicate_element_ids):
        """Sets the ignore_duplicate_element_ids of this ServiceSpecificationGroupDto.

        Indicate if duplicated Ids within child elements are to be ignored. Will not perform checks for duplicates if yes.  # noqa: E501

        :param ignore_duplicate_element_ids: The ignore_duplicate_element_ids of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and ignore_duplicate_element_ids is None:
            raise ValueError("Invalid value for `ignore_duplicate_element_ids`, must not be `None`")  # noqa: E501

        self._ignore_duplicate_element_ids = ignore_duplicate_element_ids

    @property
    def total_price_gross_by_tax_rate(self):
        """Gets the total_price_gross_by_tax_rate of this ServiceSpecificationGroupDto.  # noqa: E501

        Price composition by tax rate.  # noqa: E501

        :return: The total_price_gross_by_tax_rate of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: list[GrossPriceComponentDto]
        """
        return self._total_price_gross_by_tax_rate

    @total_price_gross_by_tax_rate.setter
    def total_price_gross_by_tax_rate(self, total_price_gross_by_tax_rate):
        """Sets the total_price_gross_by_tax_rate of this ServiceSpecificationGroupDto.

        Price composition by tax rate.  # noqa: E501

        :param total_price_gross_by_tax_rate: The total_price_gross_by_tax_rate of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: list[GrossPriceComponentDto]
        """

        self._total_price_gross_by_tax_rate = total_price_gross_by_tax_rate

    @property
    def ignore_child_price_updates(self):
        """Gets the ignore_child_price_updates of this ServiceSpecificationGroupDto.  # noqa: E501

        Internally used to indicate that a propagation is currently done, this is done to not recalculate every single result from a lot of changes when it is sufficient to calculate the total price at once.  # noqa: E501

        :return: The ignore_child_price_updates of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_child_price_updates

    @ignore_child_price_updates.setter
    def ignore_child_price_updates(self, ignore_child_price_updates):
        """Sets the ignore_child_price_updates of this ServiceSpecificationGroupDto.

        Internally used to indicate that a propagation is currently done, this is done to not recalculate every single result from a lot of changes when it is sufficient to calculate the total price at once.  # noqa: E501

        :param ignore_child_price_updates: The ignore_child_price_updates of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and ignore_child_price_updates is None:
            raise ValueError("Invalid value for `ignore_child_price_updates`, must not be `None`")  # noqa: E501

        self._ignore_child_price_updates = ignore_child_price_updates

    @property
    def deducted_price(self):
        """Gets the deducted_price of this ServiceSpecificationGroupDto.  # noqa: E501

        Net price after applied deductions.  # noqa: E501

        :return: The deducted_price of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: float
        """
        return self._deducted_price

    @deducted_price.setter
    def deducted_price(self, deducted_price):
        """Sets the deducted_price of this ServiceSpecificationGroupDto.

        Net price after applied deductions.  # noqa: E501

        :param deducted_price: The deducted_price of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and deducted_price is None:
            raise ValueError("Invalid value for `deducted_price`, must not be `None`")  # noqa: E501

        self._deducted_price = deducted_price

    @property
    def deduction_factor(self):
        """Gets the deduction_factor of this ServiceSpecificationGroupDto.  # noqa: E501

        Factor of applied deductions to the total price. For example, \"0.03\" means that a 3% deduction is to be applied.  # noqa: E501

        :return: The deduction_factor of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: float
        """
        return self._deduction_factor

    @deduction_factor.setter
    def deduction_factor(self, deduction_factor):
        """Sets the deduction_factor of this ServiceSpecificationGroupDto.

        Factor of applied deductions to the total price. For example, \"0.03\" means that a 3% deduction is to be applied.  # noqa: E501

        :param deduction_factor: The deduction_factor of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and deduction_factor is None:
            raise ValueError("Invalid value for `deduction_factor`, must not be `None`")  # noqa: E501

        self._deduction_factor = deduction_factor

    @property
    def absolute_deduction(self):
        """Gets the absolute_deduction of this ServiceSpecificationGroupDto.  # noqa: E501

        The exact amount of the discount as an absolute value. For backwards compatibility reasons, setting this value will also set a calculated value to DeductionFactor, which will also be updated in case the total price is changed to reflect a relative value of the absolute discount sum.  # noqa: E501

        :return: The absolute_deduction of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: float
        """
        return self._absolute_deduction

    @absolute_deduction.setter
    def absolute_deduction(self, absolute_deduction):
        """Sets the absolute_deduction of this ServiceSpecificationGroupDto.

        The exact amount of the discount as an absolute value. For backwards compatibility reasons, setting this value will also set a calculated value to DeductionFactor, which will also be updated in case the total price is changed to reflect a relative value of the absolute discount sum.  # noqa: E501

        :param absolute_deduction: The absolute_deduction of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: float
        """

        self._absolute_deduction = absolute_deduction

    @property
    def total_price(self):
        """Gets the total_price of this ServiceSpecificationGroupDto.  # noqa: E501

        Will return this ElementContainerBase's total price.  # noqa: E501

        :return: The total_price of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this ServiceSpecificationGroupDto.

        Will return this ElementContainerBase's total price.  # noqa: E501

        :param total_price: The total_price of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and total_price is None:
            raise ValueError("Invalid value for `total_price`, must not be `None`")  # noqa: E501

        self._total_price = total_price

    @property
    def total_price_gross(self):
        """Gets the total_price_gross of this ServiceSpecificationGroupDto.  # noqa: E501

        The total gross price for this ElementContainerBase including all child elements.  # noqa: E501

        :return: The total_price_gross of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: float
        """
        return self._total_price_gross

    @total_price_gross.setter
    def total_price_gross(self, total_price_gross):
        """Sets the total_price_gross of this ServiceSpecificationGroupDto.

        The total gross price for this ElementContainerBase including all child elements.  # noqa: E501

        :param total_price_gross: The total_price_gross of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and total_price_gross is None:
            raise ValueError("Invalid value for `total_price_gross`, must not be `None`")  # noqa: E501

        self._total_price_gross = total_price_gross

    @property
    def total_price_gross_deducted(self):
        """Gets the total_price_gross_deducted of this ServiceSpecificationGroupDto.  # noqa: E501

        Total gross price after applied deductions.  # noqa: E501

        :return: The total_price_gross_deducted of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: float
        """
        return self._total_price_gross_deducted

    @total_price_gross_deducted.setter
    def total_price_gross_deducted(self, total_price_gross_deducted):
        """Sets the total_price_gross_deducted of this ServiceSpecificationGroupDto.

        Total gross price after applied deductions.  # noqa: E501

        :param total_price_gross_deducted: The total_price_gross_deducted of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and total_price_gross_deducted is None:
            raise ValueError("Invalid value for `total_price_gross_deducted`, must not be `None`")  # noqa: E501

        self._total_price_gross_deducted = total_price_gross_deducted

    @property
    def price_type(self):
        """Gets the price_type of this ServiceSpecificationGroupDto.  # noqa: E501

        Indicates the PriceType of this ElementContainerBase, whether it should factor into total costs or not.  # noqa: E501

        :return: The price_type of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: PriceTypeDto
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this ServiceSpecificationGroupDto.

        Indicates the PriceType of this ElementContainerBase, whether it should factor into total costs or not.  # noqa: E501

        :param price_type: The price_type of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: PriceTypeDto
        """
        if self._configuration.client_side_validation and price_type is None:
            raise ValueError("Invalid value for `price_type`, must not be `None`")  # noqa: E501

        self._price_type = price_type

    @property
    def short_text(self):
        """Gets the short_text of this ServiceSpecificationGroupDto.  # noqa: E501

        Description for this ServiceSpecificationGroup.  # noqa: E501

        :return: The short_text of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: str
        """
        return self._short_text

    @short_text.setter
    def short_text(self, short_text):
        """Sets the short_text of this ServiceSpecificationGroupDto.

        Description for this ServiceSpecificationGroup.  # noqa: E501

        :param short_text: The short_text of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: str
        """

        self._short_text = short_text

    @property
    def comission_status(self):
        """Gets the comission_status of this ServiceSpecificationGroupDto.  # noqa: E501

        Indicates if this service specification group is commissioned (and therefore should be executed), postponed for later or undefined.  # noqa: E501

        :return: The comission_status of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: ComissionStatusDto
        """
        return self._comission_status

    @comission_status.setter
    def comission_status(self, comission_status):
        """Sets the comission_status of this ServiceSpecificationGroupDto.

        Indicates if this service specification group is commissioned (and therefore should be executed), postponed for later or undefined.  # noqa: E501

        :param comission_status: The comission_status of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: ComissionStatusDto
        """
        if self._configuration.client_side_validation and comission_status is None:
            raise ValueError("Invalid value for `comission_status`, must not be `None`")  # noqa: E501

        self._comission_status = comission_status

    @property
    def item_number(self):
        """Gets the item_number of this ServiceSpecificationGroupDto.  # noqa: E501

        The ItemNumber for this INumberedElement interface.  # noqa: E501

        :return: The item_number of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: ItemNumberDto
        """
        return self._item_number

    @item_number.setter
    def item_number(self, item_number):
        """Sets the item_number of this ServiceSpecificationGroupDto.

        The ItemNumber for this INumberedElement interface.  # noqa: E501

        :param item_number: The item_number of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: ItemNumberDto
        """

        self._item_number = item_number

    @property
    def element_type(self):
        """Gets the element_type of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The element_type of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: str
        """
        return self._element_type

    @element_type.setter
    def element_type(self, element_type):
        """Sets the element_type of this ServiceSpecificationGroupDto.


        :param element_type: The element_type of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: str
        """

        self._element_type = element_type

    @property
    def is_lot(self):
        """Gets the is_lot of this ServiceSpecificationGroupDto.  # noqa: E501

        This indicates if this group is the parent of a lot. See the documentation for more information about working with lots.  # noqa: E501

        :return: The is_lot of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_lot

    @is_lot.setter
    def is_lot(self, is_lot):
        """Sets the is_lot of this ServiceSpecificationGroupDto.

        This indicates if this group is the parent of a lot. See the documentation for more information about working with lots.  # noqa: E501

        :param is_lot: The is_lot of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_lot is None:
            raise ValueError("Invalid value for `is_lot`, must not be `None`")  # noqa: E501

        self._is_lot = is_lot

    @property
    def alternative_to(self):
        """Gets the alternative_to of this ServiceSpecificationGroupDto.  # noqa: E501

        If this group is an alternative for a base group, then this property should point to the id of the group in this service specification that it can replace. If this is an alternative group to a base group, the PriceType should typically be set to \"WithoutTotal\" so this group does not factor into total costs. The PriceType is not changed when this property is set  # noqa: E501

        :return: The alternative_to of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: str
        """
        return self._alternative_to

    @alternative_to.setter
    def alternative_to(self, alternative_to):
        """Sets the alternative_to of this ServiceSpecificationGroupDto.

        If this group is an alternative for a base group, then this property should point to the id of the group in this service specification that it can replace. If this is an alternative group to a base group, the PriceType should typically be set to \"WithoutTotal\" so this group does not factor into total costs. The PriceType is not changed when this property is set  # noqa: E501

        :param alternative_to: The alternative_to of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: str
        """

        self._alternative_to = alternative_to

    @property
    def oenorm_properties(self):
        """Gets the oenorm_properties of this ServiceSpecificationGroupDto.  # noqa: E501

        This class models special properties that only apply to some exchange scenarios where ÖNorm is used.  # noqa: E501

        :return: The oenorm_properties of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: OenormPropertiesDto
        """
        return self._oenorm_properties

    @oenorm_properties.setter
    def oenorm_properties(self, oenorm_properties):
        """Sets the oenorm_properties of this ServiceSpecificationGroupDto.

        This class models special properties that only apply to some exchange scenarios where ÖNorm is used.  # noqa: E501

        :param oenorm_properties: The oenorm_properties of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: OenormPropertiesDto
        """

        self._oenorm_properties = oenorm_properties

    @property
    def hierarchy_level(self):
        """Gets the hierarchy_level of this ServiceSpecificationGroupDto.  # noqa: E501

        This is a zero based hierarchy level. It's set automatically when used in the context of a Project, and can be used to identify the hierarchy level of the current element.  # noqa: E501

        :return: The hierarchy_level of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: int
        """
        return self._hierarchy_level

    @hierarchy_level.setter
    def hierarchy_level(self, hierarchy_level):
        """Sets the hierarchy_level of this ServiceSpecificationGroupDto.

        This is a zero based hierarchy level. It's set automatically when used in the context of a Project, and can be used to identify the hierarchy level of the current element.  # noqa: E501

        :param hierarchy_level: The hierarchy_level of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and hierarchy_level is None:
            raise ValueError("Invalid value for `hierarchy_level`, must not be `None`")  # noqa: E501

        self._hierarchy_level = hierarchy_level

    @property
    def addendum_status(self):
        """Gets the addendum_status of this ServiceSpecificationGroupDto.  # noqa: E501

        This indicates, if this element is part of an addendum an, if yes, with what status.  # noqa: E501

        :return: The addendum_status of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: AddendumStatusDto
        """
        return self._addendum_status

    @addendum_status.setter
    def addendum_status(self, addendum_status):
        """Sets the addendum_status of this ServiceSpecificationGroupDto.

        This indicates, if this element is part of an addendum an, if yes, with what status.  # noqa: E501

        :param addendum_status: The addendum_status of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: AddendumStatusDto
        """

        self._addendum_status = addendum_status

    @property
    def alternative_identifier(self):
        """Gets the alternative_identifier of this ServiceSpecificationGroupDto.  # noqa: E501

        This is an optional property that can be used together with AlternativeTo. If this is set, you can indicate which alternative group a specific group is assigned to. That way, if you specifiy multiple alternative ServiceSpecificationGroups with the same AlternativeIdentifier, you can indicate that to replace a single base ServiceSpecificationGroup, multiple alternative ServiceSpecificationGroups should be used. This property is not checked or managed automatically, so it is possible for this property to become invalid, by for example setting this property but not setting a base group via AlternativeTo.  # noqa: E501

        :return: The alternative_identifier of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: int
        """
        return self._alternative_identifier

    @alternative_identifier.setter
    def alternative_identifier(self, alternative_identifier):
        """Sets the alternative_identifier of this ServiceSpecificationGroupDto.

        This is an optional property that can be used together with AlternativeTo. If this is set, you can indicate which alternative group a specific group is assigned to. That way, if you specifiy multiple alternative ServiceSpecificationGroups with the same AlternativeIdentifier, you can indicate that to replace a single base ServiceSpecificationGroup, multiple alternative ServiceSpecificationGroups should be used. This property is not checked or managed automatically, so it is possible for this property to become invalid, by for example setting this property but not setting a base group via AlternativeTo.  # noqa: E501

        :param alternative_identifier: The alternative_identifier of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: int
        """

        self._alternative_identifier = alternative_identifier

    @property
    def alternative_group_identifier(self):
        """Gets the alternative_group_identifier of this ServiceSpecificationGroupDto.  # noqa: E501

        This is an optional property that can be used together with AlternativeTo and AlternativeGroupIdentifier. If this is set, you can indicate which alternative group a specific group is assigned to. That way, you can specify the id (in integer format) for the alternative group this group belongs to. It's different to AlternativeIdentifier in that the other property describes the id of the group, while this property here describes the group itself. If a group only has set AlternativeGroupIdentifier but not AlternativeIdentifier, then it likely is a base group for a specific group. This property is not checked or managed automatically, so it is possible for this property to become invalid, by for example setting this property but not setting a base group via AlternativeTo.  # noqa: E501

        :return: The alternative_group_identifier of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: int
        """
        return self._alternative_group_identifier

    @alternative_group_identifier.setter
    def alternative_group_identifier(self, alternative_group_identifier):
        """Sets the alternative_group_identifier of this ServiceSpecificationGroupDto.

        This is an optional property that can be used together with AlternativeTo and AlternativeGroupIdentifier. If this is set, you can indicate which alternative group a specific group is assigned to. That way, you can specify the id (in integer format) for the alternative group this group belongs to. It's different to AlternativeIdentifier in that the other property describes the id of the group, while this property here describes the group itself. If a group only has set AlternativeGroupIdentifier but not AlternativeIdentifier, then it likely is a base group for a specific group. This property is not checked or managed automatically, so it is possible for this property to become invalid, by for example setting this property but not setting a base group via AlternativeTo.  # noqa: E501

        :param alternative_group_identifier: The alternative_group_identifier of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: int
        """

        self._alternative_group_identifier = alternative_group_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(ServiceSpecificationGroupDto, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceSpecificationGroupDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceSpecificationGroupDto):
            return True

        return self.to_dict() != other.to_dict()
