# coding: utf-8

"""
    AVACloud API 1.52.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.52.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class ItemNumberDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'string_representation': 'str',
        'is_schema_compliant': 'bool',
        'item_number_schema': 'ItemNumberSchemaDto',
        'identifiers': 'list[str]',
        'is_lot': 'bool',
        'hierarchy_level': 'int',
        'is_attached_to_position': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'string_representation': 'stringRepresentation',
        'is_schema_compliant': 'isSchemaCompliant',
        'item_number_schema': 'itemNumberSchema',
        'identifiers': 'identifiers',
        'is_lot': 'isLot',
        'hierarchy_level': 'hierarchyLevel',
        'is_attached_to_position': 'isAttachedToPosition'
    }

    def __init__(self, id=None, string_representation=None, is_schema_compliant=None, item_number_schema=None, identifiers=None, is_lot=None, hierarchy_level=None, is_attached_to_position=None, _configuration=None):  # noqa: E501
        """ItemNumberDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._string_representation = None
        self._is_schema_compliant = None
        self._item_number_schema = None
        self._identifiers = None
        self._is_lot = None
        self._hierarchy_level = None
        self._is_attached_to_position = None
        self.discriminator = None

        self.id = id
        if string_representation is not None:
            self.string_representation = string_representation
        self.is_schema_compliant = is_schema_compliant
        if item_number_schema is not None:
            self.item_number_schema = item_number_schema
        if identifiers is not None:
            self.identifiers = identifiers
        self.is_lot = is_lot
        self.hierarchy_level = hierarchy_level
        self.is_attached_to_position = is_attached_to_position

    @property
    def id(self):
        """Gets the id of this ItemNumberDto.  # noqa: E501

        Elements GUID identifier.  # noqa: E501

        :return: The id of this ItemNumberDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemNumberDto.

        Elements GUID identifier.  # noqa: E501

        :param id: The id of this ItemNumberDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def string_representation(self):
        """Gets the string_representation of this ItemNumberDto.  # noqa: E501

        Will return this ItemNumber as point delimited string. Will not distinguish between upper- and lowercase and return an all-lowercase representation. Will consider first numbers, then characters, e.g. 1a is considered preceding aa. Transformation to all lowercase can be configured in the ItemNumberSchema property.  # noqa: E501

        :return: The string_representation of this ItemNumberDto.  # noqa: E501
        :rtype: str
        """
        return self._string_representation

    @string_representation.setter
    def string_representation(self, string_representation):
        """Sets the string_representation of this ItemNumberDto.

        Will return this ItemNumber as point delimited string. Will not distinguish between upper- and lowercase and return an all-lowercase representation. Will consider first numbers, then characters, e.g. 1a is considered preceding aa. Transformation to all lowercase can be configured in the ItemNumberSchema property.  # noqa: E501

        :param string_representation: The string_representation of this ItemNumberDto.  # noqa: E501
        :type: str
        """

        self._string_representation = string_representation

    @property
    def is_schema_compliant(self):
        """Gets the is_schema_compliant of this ItemNumberDto.  # noqa: E501

        Indicates if the characters and the length of the Identifiers match the current ItemNumberSchema.  # noqa: E501

        :return: The is_schema_compliant of this ItemNumberDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_schema_compliant

    @is_schema_compliant.setter
    def is_schema_compliant(self, is_schema_compliant):
        """Sets the is_schema_compliant of this ItemNumberDto.

        Indicates if the characters and the length of the Identifiers match the current ItemNumberSchema.  # noqa: E501

        :param is_schema_compliant: The is_schema_compliant of this ItemNumberDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_schema_compliant is None:
            raise ValueError("Invalid value for `is_schema_compliant`, must not be `None`")  # noqa: E501

        self._is_schema_compliant = is_schema_compliant

    @property
    def item_number_schema(self):
        """Gets the item_number_schema of this ItemNumberDto.  # noqa: E501

        Used for representing and validating this ItemNumber.  # noqa: E501

        :return: The item_number_schema of this ItemNumberDto.  # noqa: E501
        :rtype: ItemNumberSchemaDto
        """
        return self._item_number_schema

    @item_number_schema.setter
    def item_number_schema(self, item_number_schema):
        """Sets the item_number_schema of this ItemNumberDto.

        Used for representing and validating this ItemNumber.  # noqa: E501

        :param item_number_schema: The item_number_schema of this ItemNumberDto.  # noqa: E501
        :type: ItemNumberSchemaDto
        """

        self._item_number_schema = item_number_schema

    @property
    def identifiers(self):
        """Gets the identifiers of this ItemNumberDto.  # noqa: E501

        Collection of the single identifiers in this ItemNumber. P.e., \"02.03.004\" will have three elements \"02\", \"03\", and \"004\". Since ReadOnlyObservableCollection`1 does have the event set to protected, it can be accessed like this: (itemNumber.Identifiers as INotifyCollectionChanged).CollectionChanged  # noqa: E501

        :return: The identifiers of this ItemNumberDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this ItemNumberDto.

        Collection of the single identifiers in this ItemNumber. P.e., \"02.03.004\" will have three elements \"02\", \"03\", and \"004\". Since ReadOnlyObservableCollection`1 does have the event set to protected, it can be accessed like this: (itemNumber.Identifiers as INotifyCollectionChanged).CollectionChanged  # noqa: E501

        :param identifiers: The identifiers of this ItemNumberDto.  # noqa: E501
        :type: list[str]
        """

        self._identifiers = identifiers

    @property
    def is_lot(self):
        """Gets the is_lot of this ItemNumberDto.  # noqa: E501

        This indicates if this item number is at the lot level. Find out more about lots in the documentation.  # noqa: E501

        :return: The is_lot of this ItemNumberDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_lot

    @is_lot.setter
    def is_lot(self, is_lot):
        """Sets the is_lot of this ItemNumberDto.

        This indicates if this item number is at the lot level. Find out more about lots in the documentation.  # noqa: E501

        :param is_lot: The is_lot of this ItemNumberDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_lot is None:
            raise ValueError("Invalid value for `is_lot`, must not be `None`")  # noqa: E501

        self._is_lot = is_lot

    @property
    def hierarchy_level(self):
        """Gets the hierarchy_level of this ItemNumberDto.  # noqa: E501

        This is a zero based hierarchy level. It's set automatically when used in the context of a Project, and can be used to identify the hierarchy level of the current element.  # noqa: E501

        :return: The hierarchy_level of this ItemNumberDto.  # noqa: E501
        :rtype: int
        """
        return self._hierarchy_level

    @hierarchy_level.setter
    def hierarchy_level(self, hierarchy_level):
        """Sets the hierarchy_level of this ItemNumberDto.

        This is a zero based hierarchy level. It's set automatically when used in the context of a Project, and can be used to identify the hierarchy level of the current element.  # noqa: E501

        :param hierarchy_level: The hierarchy_level of this ItemNumberDto.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and hierarchy_level is None:
            raise ValueError("Invalid value for `hierarchy_level`, must not be `None`")  # noqa: E501

        self._hierarchy_level = hierarchy_level

    @property
    def is_attached_to_position(self):
        """Gets the is_attached_to_position of this ItemNumberDto.  # noqa: E501

        This property indicates if this ItemNumber is attached to an object of the Position type.  # noqa: E501

        :return: The is_attached_to_position of this ItemNumberDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_attached_to_position

    @is_attached_to_position.setter
    def is_attached_to_position(self, is_attached_to_position):
        """Sets the is_attached_to_position of this ItemNumberDto.

        This property indicates if this ItemNumber is attached to an object of the Position type.  # noqa: E501

        :param is_attached_to_position: The is_attached_to_position of this ItemNumberDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_attached_to_position is None:
            raise ValueError("Invalid value for `is_attached_to_position`, must not be `None`")  # noqa: E501

        self._is_attached_to_position = is_attached_to_position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemNumberDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemNumberDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemNumberDto):
            return True

        return self.to_dict() != other.to_dict()
