# coding: utf-8

"""
    AVACloud API 1.52.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.52.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class LineItemCharge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'net_amount': 'float',
        'relative_charge_base_amount': 'float',
        'relative_charge_percentage': 'float',
        'reason': 'str',
        'reason_code': 'str'
    }

    attribute_map = {
        'net_amount': 'netAmount',
        'relative_charge_base_amount': 'relativeChargeBaseAmount',
        'relative_charge_percentage': 'relativeChargePercentage',
        'reason': 'reason',
        'reason_code': 'reasonCode'
    }

    def __init__(self, net_amount=None, relative_charge_base_amount=None, relative_charge_percentage=None, reason=None, reason_code=None, _configuration=None):  # noqa: E501
        """LineItemCharge - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._net_amount = None
        self._relative_charge_base_amount = None
        self._relative_charge_percentage = None
        self._reason = None
        self._reason_code = None
        self.discriminator = None

        if net_amount is not None:
            self.net_amount = net_amount
        if relative_charge_base_amount is not None:
            self.relative_charge_base_amount = relative_charge_base_amount
        if relative_charge_percentage is not None:
            self.relative_charge_percentage = relative_charge_percentage
        if reason is not None:
            self.reason = reason
        if reason_code is not None:
            self.reason_code = reason_code

    @property
    def net_amount(self):
        """Gets the net_amount of this LineItemCharge.  # noqa: E501


        :return: The net_amount of this LineItemCharge.  # noqa: E501
        :rtype: float
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this LineItemCharge.


        :param net_amount: The net_amount of this LineItemCharge.  # noqa: E501
        :type: float
        """

        self._net_amount = net_amount

    @property
    def relative_charge_base_amount(self):
        """Gets the relative_charge_base_amount of this LineItemCharge.  # noqa: E501


        :return: The relative_charge_base_amount of this LineItemCharge.  # noqa: E501
        :rtype: float
        """
        return self._relative_charge_base_amount

    @relative_charge_base_amount.setter
    def relative_charge_base_amount(self, relative_charge_base_amount):
        """Sets the relative_charge_base_amount of this LineItemCharge.


        :param relative_charge_base_amount: The relative_charge_base_amount of this LineItemCharge.  # noqa: E501
        :type: float
        """

        self._relative_charge_base_amount = relative_charge_base_amount

    @property
    def relative_charge_percentage(self):
        """Gets the relative_charge_percentage of this LineItemCharge.  # noqa: E501


        :return: The relative_charge_percentage of this LineItemCharge.  # noqa: E501
        :rtype: float
        """
        return self._relative_charge_percentage

    @relative_charge_percentage.setter
    def relative_charge_percentage(self, relative_charge_percentage):
        """Sets the relative_charge_percentage of this LineItemCharge.


        :param relative_charge_percentage: The relative_charge_percentage of this LineItemCharge.  # noqa: E501
        :type: float
        """

        self._relative_charge_percentage = relative_charge_percentage

    @property
    def reason(self):
        """Gets the reason of this LineItemCharge.  # noqa: E501


        :return: The reason of this LineItemCharge.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this LineItemCharge.


        :param reason: The reason of this LineItemCharge.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def reason_code(self):
        """Gets the reason_code of this LineItemCharge.  # noqa: E501


        :return: The reason_code of this LineItemCharge.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this LineItemCharge.


        :param reason_code: The reason_code of this LineItemCharge.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LineItemCharge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LineItemCharge):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LineItemCharge):
            return True

        return self.to_dict() != other.to_dict()
