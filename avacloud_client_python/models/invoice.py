# coding: utf-8

"""
    AVACloud API 1.52.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.52.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class Invoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invoice_number': 'str',
        'invoice_date': 'datetime',
        'invoice_type': 'InvoiceType',
        'currency_code': 'str',
        'payment_due_date': 'datetime',
        'references': 'References',
        'payment_terms': 'str',
        'previous_invoices': 'list[PreviousInvoice]',
        'buyer': 'Organization',
        'seller': 'Organization',
        'payee': 'Payee',
        'invoice_notes': 'list[InvoiceNote]',
        'invoice_period': 'InvoicePeriod',
        'totals': 'InvoiceTotals',
        'payment_instructions': 'PaymentInstructions',
        'documents': 'list[SupportingDocument]',
        'vat_breakdown': 'list[VatBreakdown]',
        'allowances': 'list[InvoiceAllowance]',
        'charges': 'list[InvoiceCharge]',
        'line_items': 'list[InvoiceLineItem]',
        'source_type': 'SourceType'
    }

    attribute_map = {
        'invoice_number': 'invoiceNumber',
        'invoice_date': 'invoiceDate',
        'invoice_type': 'invoiceType',
        'currency_code': 'currencyCode',
        'payment_due_date': 'paymentDueDate',
        'references': 'references',
        'payment_terms': 'paymentTerms',
        'previous_invoices': 'previousInvoices',
        'buyer': 'buyer',
        'seller': 'seller',
        'payee': 'payee',
        'invoice_notes': 'invoiceNotes',
        'invoice_period': 'invoicePeriod',
        'totals': 'totals',
        'payment_instructions': 'paymentInstructions',
        'documents': 'documents',
        'vat_breakdown': 'vatBreakdown',
        'allowances': 'allowances',
        'charges': 'charges',
        'line_items': 'lineItems',
        'source_type': 'sourceType'
    }

    def __init__(self, invoice_number=None, invoice_date=None, invoice_type=None, currency_code=None, payment_due_date=None, references=None, payment_terms=None, previous_invoices=None, buyer=None, seller=None, payee=None, invoice_notes=None, invoice_period=None, totals=None, payment_instructions=None, documents=None, vat_breakdown=None, allowances=None, charges=None, line_items=None, source_type=None, _configuration=None):  # noqa: E501
        """Invoice - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._invoice_number = None
        self._invoice_date = None
        self._invoice_type = None
        self._currency_code = None
        self._payment_due_date = None
        self._references = None
        self._payment_terms = None
        self._previous_invoices = None
        self._buyer = None
        self._seller = None
        self._payee = None
        self._invoice_notes = None
        self._invoice_period = None
        self._totals = None
        self._payment_instructions = None
        self._documents = None
        self._vat_breakdown = None
        self._allowances = None
        self._charges = None
        self._line_items = None
        self._source_type = None
        self.discriminator = None

        if invoice_number is not None:
            self.invoice_number = invoice_number
        if invoice_date is not None:
            self.invoice_date = invoice_date
        if invoice_type is not None:
            self.invoice_type = invoice_type
        if currency_code is not None:
            self.currency_code = currency_code
        if payment_due_date is not None:
            self.payment_due_date = payment_due_date
        if references is not None:
            self.references = references
        if payment_terms is not None:
            self.payment_terms = payment_terms
        if previous_invoices is not None:
            self.previous_invoices = previous_invoices
        if buyer is not None:
            self.buyer = buyer
        if seller is not None:
            self.seller = seller
        if payee is not None:
            self.payee = payee
        if invoice_notes is not None:
            self.invoice_notes = invoice_notes
        if invoice_period is not None:
            self.invoice_period = invoice_period
        if totals is not None:
            self.totals = totals
        if payment_instructions is not None:
            self.payment_instructions = payment_instructions
        if documents is not None:
            self.documents = documents
        if vat_breakdown is not None:
            self.vat_breakdown = vat_breakdown
        if allowances is not None:
            self.allowances = allowances
        if charges is not None:
            self.charges = charges
        if line_items is not None:
            self.line_items = line_items
        self.source_type = source_type

    @property
    def invoice_number(self):
        """Gets the invoice_number of this Invoice.  # noqa: E501


        :return: The invoice_number of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this Invoice.


        :param invoice_number: The invoice_number of this Invoice.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def invoice_date(self):
        """Gets the invoice_date of this Invoice.  # noqa: E501


        :return: The invoice_date of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this Invoice.


        :param invoice_date: The invoice_date of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._invoice_date = invoice_date

    @property
    def invoice_type(self):
        """Gets the invoice_type of this Invoice.  # noqa: E501


        :return: The invoice_type of this Invoice.  # noqa: E501
        :rtype: InvoiceType
        """
        return self._invoice_type

    @invoice_type.setter
    def invoice_type(self, invoice_type):
        """Sets the invoice_type of this Invoice.


        :param invoice_type: The invoice_type of this Invoice.  # noqa: E501
        :type: InvoiceType
        """

        self._invoice_type = invoice_type

    @property
    def currency_code(self):
        """Gets the currency_code of this Invoice.  # noqa: E501


        :return: The currency_code of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Invoice.


        :param currency_code: The currency_code of this Invoice.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def payment_due_date(self):
        """Gets the payment_due_date of this Invoice.  # noqa: E501


        :return: The payment_due_date of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_due_date

    @payment_due_date.setter
    def payment_due_date(self, payment_due_date):
        """Sets the payment_due_date of this Invoice.


        :param payment_due_date: The payment_due_date of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._payment_due_date = payment_due_date

    @property
    def references(self):
        """Gets the references of this Invoice.  # noqa: E501


        :return: The references of this Invoice.  # noqa: E501
        :rtype: References
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this Invoice.


        :param references: The references of this Invoice.  # noqa: E501
        :type: References
        """

        self._references = references

    @property
    def payment_terms(self):
        """Gets the payment_terms of this Invoice.  # noqa: E501


        :return: The payment_terms of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """Sets the payment_terms of this Invoice.


        :param payment_terms: The payment_terms of this Invoice.  # noqa: E501
        :type: str
        """

        self._payment_terms = payment_terms

    @property
    def previous_invoices(self):
        """Gets the previous_invoices of this Invoice.  # noqa: E501


        :return: The previous_invoices of this Invoice.  # noqa: E501
        :rtype: list[PreviousInvoice]
        """
        return self._previous_invoices

    @previous_invoices.setter
    def previous_invoices(self, previous_invoices):
        """Sets the previous_invoices of this Invoice.


        :param previous_invoices: The previous_invoices of this Invoice.  # noqa: E501
        :type: list[PreviousInvoice]
        """

        self._previous_invoices = previous_invoices

    @property
    def buyer(self):
        """Gets the buyer of this Invoice.  # noqa: E501


        :return: The buyer of this Invoice.  # noqa: E501
        :rtype: Organization
        """
        return self._buyer

    @buyer.setter
    def buyer(self, buyer):
        """Sets the buyer of this Invoice.


        :param buyer: The buyer of this Invoice.  # noqa: E501
        :type: Organization
        """

        self._buyer = buyer

    @property
    def seller(self):
        """Gets the seller of this Invoice.  # noqa: E501


        :return: The seller of this Invoice.  # noqa: E501
        :rtype: Organization
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this Invoice.


        :param seller: The seller of this Invoice.  # noqa: E501
        :type: Organization
        """

        self._seller = seller

    @property
    def payee(self):
        """Gets the payee of this Invoice.  # noqa: E501


        :return: The payee of this Invoice.  # noqa: E501
        :rtype: Payee
        """
        return self._payee

    @payee.setter
    def payee(self, payee):
        """Sets the payee of this Invoice.


        :param payee: The payee of this Invoice.  # noqa: E501
        :type: Payee
        """

        self._payee = payee

    @property
    def invoice_notes(self):
        """Gets the invoice_notes of this Invoice.  # noqa: E501


        :return: The invoice_notes of this Invoice.  # noqa: E501
        :rtype: list[InvoiceNote]
        """
        return self._invoice_notes

    @invoice_notes.setter
    def invoice_notes(self, invoice_notes):
        """Sets the invoice_notes of this Invoice.


        :param invoice_notes: The invoice_notes of this Invoice.  # noqa: E501
        :type: list[InvoiceNote]
        """

        self._invoice_notes = invoice_notes

    @property
    def invoice_period(self):
        """Gets the invoice_period of this Invoice.  # noqa: E501


        :return: The invoice_period of this Invoice.  # noqa: E501
        :rtype: InvoicePeriod
        """
        return self._invoice_period

    @invoice_period.setter
    def invoice_period(self, invoice_period):
        """Sets the invoice_period of this Invoice.


        :param invoice_period: The invoice_period of this Invoice.  # noqa: E501
        :type: InvoicePeriod
        """

        self._invoice_period = invoice_period

    @property
    def totals(self):
        """Gets the totals of this Invoice.  # noqa: E501


        :return: The totals of this Invoice.  # noqa: E501
        :rtype: InvoiceTotals
        """
        return self._totals

    @totals.setter
    def totals(self, totals):
        """Sets the totals of this Invoice.


        :param totals: The totals of this Invoice.  # noqa: E501
        :type: InvoiceTotals
        """

        self._totals = totals

    @property
    def payment_instructions(self):
        """Gets the payment_instructions of this Invoice.  # noqa: E501


        :return: The payment_instructions of this Invoice.  # noqa: E501
        :rtype: PaymentInstructions
        """
        return self._payment_instructions

    @payment_instructions.setter
    def payment_instructions(self, payment_instructions):
        """Sets the payment_instructions of this Invoice.


        :param payment_instructions: The payment_instructions of this Invoice.  # noqa: E501
        :type: PaymentInstructions
        """

        self._payment_instructions = payment_instructions

    @property
    def documents(self):
        """Gets the documents of this Invoice.  # noqa: E501


        :return: The documents of this Invoice.  # noqa: E501
        :rtype: list[SupportingDocument]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this Invoice.


        :param documents: The documents of this Invoice.  # noqa: E501
        :type: list[SupportingDocument]
        """

        self._documents = documents

    @property
    def vat_breakdown(self):
        """Gets the vat_breakdown of this Invoice.  # noqa: E501


        :return: The vat_breakdown of this Invoice.  # noqa: E501
        :rtype: list[VatBreakdown]
        """
        return self._vat_breakdown

    @vat_breakdown.setter
    def vat_breakdown(self, vat_breakdown):
        """Sets the vat_breakdown of this Invoice.


        :param vat_breakdown: The vat_breakdown of this Invoice.  # noqa: E501
        :type: list[VatBreakdown]
        """

        self._vat_breakdown = vat_breakdown

    @property
    def allowances(self):
        """Gets the allowances of this Invoice.  # noqa: E501


        :return: The allowances of this Invoice.  # noqa: E501
        :rtype: list[InvoiceAllowance]
        """
        return self._allowances

    @allowances.setter
    def allowances(self, allowances):
        """Sets the allowances of this Invoice.


        :param allowances: The allowances of this Invoice.  # noqa: E501
        :type: list[InvoiceAllowance]
        """

        self._allowances = allowances

    @property
    def charges(self):
        """Gets the charges of this Invoice.  # noqa: E501


        :return: The charges of this Invoice.  # noqa: E501
        :rtype: list[InvoiceCharge]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this Invoice.


        :param charges: The charges of this Invoice.  # noqa: E501
        :type: list[InvoiceCharge]
        """

        self._charges = charges

    @property
    def line_items(self):
        """Gets the line_items of this Invoice.  # noqa: E501


        :return: The line_items of this Invoice.  # noqa: E501
        :rtype: list[InvoiceLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this Invoice.


        :param line_items: The line_items of this Invoice.  # noqa: E501
        :type: list[InvoiceLineItem]
        """

        self._line_items = line_items

    @property
    def source_type(self):
        """Gets the source_type of this Invoice.  # noqa: E501


        :return: The source_type of this Invoice.  # noqa: E501
        :rtype: SourceType
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this Invoice.


        :param source_type: The source_type of this Invoice.  # noqa: E501
        :type: SourceType
        """
        if self._configuration.client_side_validation and source_type is None:
            raise ValueError("Invalid value for `source_type`, must not be `None`")  # noqa: E501

        self._source_type = source_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Invoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invoice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Invoice):
            return True

        return self.to_dict() != other.to_dict()
