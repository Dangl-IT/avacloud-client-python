# coding: utf-8

"""
    AVACloud API 1.52.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.52.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class AvaProjectWrapper(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project': 'ProjectDto',
        'invoice_number': 'str',
        'documents': 'list[SupportingDocument]',
        'invoice_period': 'InvoicePeriod',
        'payment_instructions': 'PaymentInstructions',
        'invoice_type': 'InvoiceType',
        'payment_due_date': 'datetime',
        'payment_terms': 'str',
        'previous_invoices': 'list[PreviousInvoice]',
        'already_paid_total_gross': 'float',
        'references': 'References'
    }

    attribute_map = {
        'project': 'project',
        'invoice_number': 'invoiceNumber',
        'documents': 'documents',
        'invoice_period': 'invoicePeriod',
        'payment_instructions': 'paymentInstructions',
        'invoice_type': 'invoiceType',
        'payment_due_date': 'paymentDueDate',
        'payment_terms': 'paymentTerms',
        'previous_invoices': 'previousInvoices',
        'already_paid_total_gross': 'alreadyPaidTotalGross',
        'references': 'references'
    }

    def __init__(self, project=None, invoice_number=None, documents=None, invoice_period=None, payment_instructions=None, invoice_type=None, payment_due_date=None, payment_terms=None, previous_invoices=None, already_paid_total_gross=None, references=None, _configuration=None):  # noqa: E501
        """AvaProjectWrapper - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._project = None
        self._invoice_number = None
        self._documents = None
        self._invoice_period = None
        self._payment_instructions = None
        self._invoice_type = None
        self._payment_due_date = None
        self._payment_terms = None
        self._previous_invoices = None
        self._already_paid_total_gross = None
        self._references = None
        self.discriminator = None

        self.project = project
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if documents is not None:
            self.documents = documents
        if invoice_period is not None:
            self.invoice_period = invoice_period
        if payment_instructions is not None:
            self.payment_instructions = payment_instructions
        self.invoice_type = invoice_type
        if payment_due_date is not None:
            self.payment_due_date = payment_due_date
        if payment_terms is not None:
            self.payment_terms = payment_terms
        if previous_invoices is not None:
            self.previous_invoices = previous_invoices
        self.already_paid_total_gross = already_paid_total_gross
        if references is not None:
            self.references = references

    @property
    def project(self):
        """Gets the project of this AvaProjectWrapper.  # noqa: E501


        :return: The project of this AvaProjectWrapper.  # noqa: E501
        :rtype: ProjectDto
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AvaProjectWrapper.


        :param project: The project of this AvaProjectWrapper.  # noqa: E501
        :type: ProjectDto
        """
        if self._configuration.client_side_validation and project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def invoice_number(self):
        """Gets the invoice_number of this AvaProjectWrapper.  # noqa: E501


        :return: The invoice_number of this AvaProjectWrapper.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this AvaProjectWrapper.


        :param invoice_number: The invoice_number of this AvaProjectWrapper.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def documents(self):
        """Gets the documents of this AvaProjectWrapper.  # noqa: E501


        :return: The documents of this AvaProjectWrapper.  # noqa: E501
        :rtype: list[SupportingDocument]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this AvaProjectWrapper.


        :param documents: The documents of this AvaProjectWrapper.  # noqa: E501
        :type: list[SupportingDocument]
        """

        self._documents = documents

    @property
    def invoice_period(self):
        """Gets the invoice_period of this AvaProjectWrapper.  # noqa: E501


        :return: The invoice_period of this AvaProjectWrapper.  # noqa: E501
        :rtype: InvoicePeriod
        """
        return self._invoice_period

    @invoice_period.setter
    def invoice_period(self, invoice_period):
        """Sets the invoice_period of this AvaProjectWrapper.


        :param invoice_period: The invoice_period of this AvaProjectWrapper.  # noqa: E501
        :type: InvoicePeriod
        """

        self._invoice_period = invoice_period

    @property
    def payment_instructions(self):
        """Gets the payment_instructions of this AvaProjectWrapper.  # noqa: E501


        :return: The payment_instructions of this AvaProjectWrapper.  # noqa: E501
        :rtype: PaymentInstructions
        """
        return self._payment_instructions

    @payment_instructions.setter
    def payment_instructions(self, payment_instructions):
        """Sets the payment_instructions of this AvaProjectWrapper.


        :param payment_instructions: The payment_instructions of this AvaProjectWrapper.  # noqa: E501
        :type: PaymentInstructions
        """

        self._payment_instructions = payment_instructions

    @property
    def invoice_type(self):
        """Gets the invoice_type of this AvaProjectWrapper.  # noqa: E501


        :return: The invoice_type of this AvaProjectWrapper.  # noqa: E501
        :rtype: InvoiceType
        """
        return self._invoice_type

    @invoice_type.setter
    def invoice_type(self, invoice_type):
        """Sets the invoice_type of this AvaProjectWrapper.


        :param invoice_type: The invoice_type of this AvaProjectWrapper.  # noqa: E501
        :type: InvoiceType
        """
        if self._configuration.client_side_validation and invoice_type is None:
            raise ValueError("Invalid value for `invoice_type`, must not be `None`")  # noqa: E501

        self._invoice_type = invoice_type

    @property
    def payment_due_date(self):
        """Gets the payment_due_date of this AvaProjectWrapper.  # noqa: E501


        :return: The payment_due_date of this AvaProjectWrapper.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_due_date

    @payment_due_date.setter
    def payment_due_date(self, payment_due_date):
        """Sets the payment_due_date of this AvaProjectWrapper.


        :param payment_due_date: The payment_due_date of this AvaProjectWrapper.  # noqa: E501
        :type: datetime
        """

        self._payment_due_date = payment_due_date

    @property
    def payment_terms(self):
        """Gets the payment_terms of this AvaProjectWrapper.  # noqa: E501


        :return: The payment_terms of this AvaProjectWrapper.  # noqa: E501
        :rtype: str
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """Sets the payment_terms of this AvaProjectWrapper.


        :param payment_terms: The payment_terms of this AvaProjectWrapper.  # noqa: E501
        :type: str
        """

        self._payment_terms = payment_terms

    @property
    def previous_invoices(self):
        """Gets the previous_invoices of this AvaProjectWrapper.  # noqa: E501


        :return: The previous_invoices of this AvaProjectWrapper.  # noqa: E501
        :rtype: list[PreviousInvoice]
        """
        return self._previous_invoices

    @previous_invoices.setter
    def previous_invoices(self, previous_invoices):
        """Sets the previous_invoices of this AvaProjectWrapper.


        :param previous_invoices: The previous_invoices of this AvaProjectWrapper.  # noqa: E501
        :type: list[PreviousInvoice]
        """

        self._previous_invoices = previous_invoices

    @property
    def already_paid_total_gross(self):
        """Gets the already_paid_total_gross of this AvaProjectWrapper.  # noqa: E501


        :return: The already_paid_total_gross of this AvaProjectWrapper.  # noqa: E501
        :rtype: float
        """
        return self._already_paid_total_gross

    @already_paid_total_gross.setter
    def already_paid_total_gross(self, already_paid_total_gross):
        """Sets the already_paid_total_gross of this AvaProjectWrapper.


        :param already_paid_total_gross: The already_paid_total_gross of this AvaProjectWrapper.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and already_paid_total_gross is None:
            raise ValueError("Invalid value for `already_paid_total_gross`, must not be `None`")  # noqa: E501

        self._already_paid_total_gross = already_paid_total_gross

    @property
    def references(self):
        """Gets the references of this AvaProjectWrapper.  # noqa: E501


        :return: The references of this AvaProjectWrapper.  # noqa: E501
        :rtype: References
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this AvaProjectWrapper.


        :param references: The references of this AvaProjectWrapper.  # noqa: E501
        :type: References
        """

        self._references = references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvaProjectWrapper, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvaProjectWrapper):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AvaProjectWrapper):
            return True

        return self.to_dict() != other.to_dict()
