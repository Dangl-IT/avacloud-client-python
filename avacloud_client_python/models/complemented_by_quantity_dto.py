# coding: utf-8

"""
    AVACloud API 1.41.0

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.41.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class ComplementedByQuantityDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quantity': 'float',
        'complementing_position_id': 'str'
    }

    attribute_map = {
        'quantity': 'quantity',
        'complementing_position_id': 'complementingPositionId'
    }

    def __init__(self, quantity=None, complementing_position_id=None, _configuration=None):  # noqa: E501
        """ComplementedByQuantityDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._quantity = None
        self._complementing_position_id = None
        self.discriminator = None

        self.quantity = quantity
        if complementing_position_id is not None:
            self.complementing_position_id = complementing_position_id

    @property
    def quantity(self):
        """Gets the quantity of this ComplementedByQuantityDto.  # noqa: E501

        The quantity that is complemented. E.g., if the base position has a quantity of 100 m² of a brick wall, a complementing position might be for 'walls that exceed 3 m height' and for a total quantity of 10 m².  # noqa: E501

        :return: The quantity of this ComplementedByQuantityDto.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ComplementedByQuantityDto.

        The quantity that is complemented. E.g., if the base position has a quantity of 100 m² of a brick wall, a complementing position might be for 'walls that exceed 3 m height' and for a total quantity of 10 m².  # noqa: E501

        :param quantity: The quantity of this ComplementedByQuantityDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def complementing_position_id(self):
        """Gets the complementing_position_id of this ComplementedByQuantityDto.  # noqa: E501

        This is the reference to the Id of the Position that is complementing. This means it does NOT reference the base position but the one that contains the actual addition.  # noqa: E501

        :return: The complementing_position_id of this ComplementedByQuantityDto.  # noqa: E501
        :rtype: str
        """
        return self._complementing_position_id

    @complementing_position_id.setter
    def complementing_position_id(self, complementing_position_id):
        """Sets the complementing_position_id of this ComplementedByQuantityDto.

        This is the reference to the Id of the Position that is complementing. This means it does NOT reference the base position but the one that contains the actual addition.  # noqa: E501

        :param complementing_position_id: The complementing_position_id of this ComplementedByQuantityDto.  # noqa: E501
        :type: str
        """

        self._complementing_position_id = complementing_position_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(ComplementedByQuantityDto, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplementedByQuantityDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComplementedByQuantityDto):
            return True

        return self.to_dict() != other.to_dict()

