# coding: utf-8

"""
    AVACloud API 1.52.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.52.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class InvoiceLineItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'note': 'str',
        'object_identifier': 'str',
        'quantity': 'float',
        'unit_code': 'str',
        'net_amount': 'float',
        'purchase_order_reference': 'str',
        'line_item_period': 'InvoicePeriod',
        'allowances': 'list[LineItemAllowance]',
        'charges': 'list[LineItemCharge]',
        'price_details': 'LineItemPriceDetail',
        'vat_information': 'list[LineItemVatInformation]',
        'item_information': 'LineItemInformation',
        'sub_items': 'list[InvoiceLineItem]'
    }

    attribute_map = {
        'identifier': 'identifier',
        'note': 'note',
        'object_identifier': 'objectIdentifier',
        'quantity': 'quantity',
        'unit_code': 'unitCode',
        'net_amount': 'netAmount',
        'purchase_order_reference': 'purchaseOrderReference',
        'line_item_period': 'lineItemPeriod',
        'allowances': 'allowances',
        'charges': 'charges',
        'price_details': 'priceDetails',
        'vat_information': 'vatInformation',
        'item_information': 'itemInformation',
        'sub_items': 'subItems'
    }

    def __init__(self, identifier=None, note=None, object_identifier=None, quantity=None, unit_code=None, net_amount=None, purchase_order_reference=None, line_item_period=None, allowances=None, charges=None, price_details=None, vat_information=None, item_information=None, sub_items=None, _configuration=None):  # noqa: E501
        """InvoiceLineItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._identifier = None
        self._note = None
        self._object_identifier = None
        self._quantity = None
        self._unit_code = None
        self._net_amount = None
        self._purchase_order_reference = None
        self._line_item_period = None
        self._allowances = None
        self._charges = None
        self._price_details = None
        self._vat_information = None
        self._item_information = None
        self._sub_items = None
        self.discriminator = None

        if identifier is not None:
            self.identifier = identifier
        if note is not None:
            self.note = note
        if object_identifier is not None:
            self.object_identifier = object_identifier
        if quantity is not None:
            self.quantity = quantity
        if unit_code is not None:
            self.unit_code = unit_code
        if net_amount is not None:
            self.net_amount = net_amount
        if purchase_order_reference is not None:
            self.purchase_order_reference = purchase_order_reference
        if line_item_period is not None:
            self.line_item_period = line_item_period
        if allowances is not None:
            self.allowances = allowances
        if charges is not None:
            self.charges = charges
        if price_details is not None:
            self.price_details = price_details
        if vat_information is not None:
            self.vat_information = vat_information
        if item_information is not None:
            self.item_information = item_information
        if sub_items is not None:
            self.sub_items = sub_items

    @property
    def identifier(self):
        """Gets the identifier of this InvoiceLineItem.  # noqa: E501


        :return: The identifier of this InvoiceLineItem.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this InvoiceLineItem.


        :param identifier: The identifier of this InvoiceLineItem.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def note(self):
        """Gets the note of this InvoiceLineItem.  # noqa: E501


        :return: The note of this InvoiceLineItem.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this InvoiceLineItem.


        :param note: The note of this InvoiceLineItem.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def object_identifier(self):
        """Gets the object_identifier of this InvoiceLineItem.  # noqa: E501


        :return: The object_identifier of this InvoiceLineItem.  # noqa: E501
        :rtype: str
        """
        return self._object_identifier

    @object_identifier.setter
    def object_identifier(self, object_identifier):
        """Sets the object_identifier of this InvoiceLineItem.


        :param object_identifier: The object_identifier of this InvoiceLineItem.  # noqa: E501
        :type: str
        """

        self._object_identifier = object_identifier

    @property
    def quantity(self):
        """Gets the quantity of this InvoiceLineItem.  # noqa: E501


        :return: The quantity of this InvoiceLineItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InvoiceLineItem.


        :param quantity: The quantity of this InvoiceLineItem.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def unit_code(self):
        """Gets the unit_code of this InvoiceLineItem.  # noqa: E501


        :return: The unit_code of this InvoiceLineItem.  # noqa: E501
        :rtype: str
        """
        return self._unit_code

    @unit_code.setter
    def unit_code(self, unit_code):
        """Sets the unit_code of this InvoiceLineItem.


        :param unit_code: The unit_code of this InvoiceLineItem.  # noqa: E501
        :type: str
        """

        self._unit_code = unit_code

    @property
    def net_amount(self):
        """Gets the net_amount of this InvoiceLineItem.  # noqa: E501


        :return: The net_amount of this InvoiceLineItem.  # noqa: E501
        :rtype: float
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this InvoiceLineItem.


        :param net_amount: The net_amount of this InvoiceLineItem.  # noqa: E501
        :type: float
        """

        self._net_amount = net_amount

    @property
    def purchase_order_reference(self):
        """Gets the purchase_order_reference of this InvoiceLineItem.  # noqa: E501


        :return: The purchase_order_reference of this InvoiceLineItem.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_reference

    @purchase_order_reference.setter
    def purchase_order_reference(self, purchase_order_reference):
        """Sets the purchase_order_reference of this InvoiceLineItem.


        :param purchase_order_reference: The purchase_order_reference of this InvoiceLineItem.  # noqa: E501
        :type: str
        """

        self._purchase_order_reference = purchase_order_reference

    @property
    def line_item_period(self):
        """Gets the line_item_period of this InvoiceLineItem.  # noqa: E501


        :return: The line_item_period of this InvoiceLineItem.  # noqa: E501
        :rtype: InvoicePeriod
        """
        return self._line_item_period

    @line_item_period.setter
    def line_item_period(self, line_item_period):
        """Sets the line_item_period of this InvoiceLineItem.


        :param line_item_period: The line_item_period of this InvoiceLineItem.  # noqa: E501
        :type: InvoicePeriod
        """

        self._line_item_period = line_item_period

    @property
    def allowances(self):
        """Gets the allowances of this InvoiceLineItem.  # noqa: E501


        :return: The allowances of this InvoiceLineItem.  # noqa: E501
        :rtype: list[LineItemAllowance]
        """
        return self._allowances

    @allowances.setter
    def allowances(self, allowances):
        """Sets the allowances of this InvoiceLineItem.


        :param allowances: The allowances of this InvoiceLineItem.  # noqa: E501
        :type: list[LineItemAllowance]
        """

        self._allowances = allowances

    @property
    def charges(self):
        """Gets the charges of this InvoiceLineItem.  # noqa: E501


        :return: The charges of this InvoiceLineItem.  # noqa: E501
        :rtype: list[LineItemCharge]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this InvoiceLineItem.


        :param charges: The charges of this InvoiceLineItem.  # noqa: E501
        :type: list[LineItemCharge]
        """

        self._charges = charges

    @property
    def price_details(self):
        """Gets the price_details of this InvoiceLineItem.  # noqa: E501


        :return: The price_details of this InvoiceLineItem.  # noqa: E501
        :rtype: LineItemPriceDetail
        """
        return self._price_details

    @price_details.setter
    def price_details(self, price_details):
        """Sets the price_details of this InvoiceLineItem.


        :param price_details: The price_details of this InvoiceLineItem.  # noqa: E501
        :type: LineItemPriceDetail
        """

        self._price_details = price_details

    @property
    def vat_information(self):
        """Gets the vat_information of this InvoiceLineItem.  # noqa: E501


        :return: The vat_information of this InvoiceLineItem.  # noqa: E501
        :rtype: list[LineItemVatInformation]
        """
        return self._vat_information

    @vat_information.setter
    def vat_information(self, vat_information):
        """Sets the vat_information of this InvoiceLineItem.


        :param vat_information: The vat_information of this InvoiceLineItem.  # noqa: E501
        :type: list[LineItemVatInformation]
        """

        self._vat_information = vat_information

    @property
    def item_information(self):
        """Gets the item_information of this InvoiceLineItem.  # noqa: E501


        :return: The item_information of this InvoiceLineItem.  # noqa: E501
        :rtype: LineItemInformation
        """
        return self._item_information

    @item_information.setter
    def item_information(self, item_information):
        """Sets the item_information of this InvoiceLineItem.


        :param item_information: The item_information of this InvoiceLineItem.  # noqa: E501
        :type: LineItemInformation
        """

        self._item_information = item_information

    @property
    def sub_items(self):
        """Gets the sub_items of this InvoiceLineItem.  # noqa: E501


        :return: The sub_items of this InvoiceLineItem.  # noqa: E501
        :rtype: list[InvoiceLineItem]
        """
        return self._sub_items

    @sub_items.setter
    def sub_items(self, sub_items):
        """Sets the sub_items of this InvoiceLineItem.


        :param sub_items: The sub_items of this InvoiceLineItem.  # noqa: E501
        :type: list[InvoiceLineItem]
        """

        self._sub_items = sub_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceLineItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceLineItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvoiceLineItem):
            return True

        return self.to_dict() != other.to_dict()
