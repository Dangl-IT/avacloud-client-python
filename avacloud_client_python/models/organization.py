# coding: utf-8

"""
    AVACloud API 1.52.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.52.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'vat_id': 'str',
        'email': 'str',
        'contact_person_name': 'str',
        'contact_person_phone': 'str',
        'contact_person_email': 'str',
        'address': 'str',
        'city': 'str',
        'zip_code': 'str',
        'country_code': 'str',
        'state': 'str'
    }

    attribute_map = {
        'name': 'name',
        'vat_id': 'vatId',
        'email': 'email',
        'contact_person_name': 'contactPersonName',
        'contact_person_phone': 'contactPersonPhone',
        'contact_person_email': 'contactPersonEmail',
        'address': 'address',
        'city': 'city',
        'zip_code': 'zipCode',
        'country_code': 'countryCode',
        'state': 'state'
    }

    def __init__(self, name=None, vat_id=None, email=None, contact_person_name=None, contact_person_phone=None, contact_person_email=None, address=None, city=None, zip_code=None, country_code=None, state=None, _configuration=None):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._vat_id = None
        self._email = None
        self._contact_person_name = None
        self._contact_person_phone = None
        self._contact_person_email = None
        self._address = None
        self._city = None
        self._zip_code = None
        self._country_code = None
        self._state = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if vat_id is not None:
            self.vat_id = vat_id
        if email is not None:
            self.email = email
        if contact_person_name is not None:
            self.contact_person_name = contact_person_name
        if contact_person_phone is not None:
            self.contact_person_phone = contact_person_phone
        if contact_person_email is not None:
            self.contact_person_email = contact_person_email
        if address is not None:
            self.address = address
        if city is not None:
            self.city = city
        if zip_code is not None:
            self.zip_code = zip_code
        if country_code is not None:
            self.country_code = country_code
        if state is not None:
            self.state = state

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501


        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.


        :param name: The name of this Organization.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def vat_id(self):
        """Gets the vat_id of this Organization.  # noqa: E501


        :return: The vat_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._vat_id

    @vat_id.setter
    def vat_id(self, vat_id):
        """Sets the vat_id of this Organization.


        :param vat_id: The vat_id of this Organization.  # noqa: E501
        :type: str
        """

        self._vat_id = vat_id

    @property
    def email(self):
        """Gets the email of this Organization.  # noqa: E501


        :return: The email of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Organization.


        :param email: The email of this Organization.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def contact_person_name(self):
        """Gets the contact_person_name of this Organization.  # noqa: E501


        :return: The contact_person_name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._contact_person_name

    @contact_person_name.setter
    def contact_person_name(self, contact_person_name):
        """Sets the contact_person_name of this Organization.


        :param contact_person_name: The contact_person_name of this Organization.  # noqa: E501
        :type: str
        """

        self._contact_person_name = contact_person_name

    @property
    def contact_person_phone(self):
        """Gets the contact_person_phone of this Organization.  # noqa: E501


        :return: The contact_person_phone of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._contact_person_phone

    @contact_person_phone.setter
    def contact_person_phone(self, contact_person_phone):
        """Sets the contact_person_phone of this Organization.


        :param contact_person_phone: The contact_person_phone of this Organization.  # noqa: E501
        :type: str
        """

        self._contact_person_phone = contact_person_phone

    @property
    def contact_person_email(self):
        """Gets the contact_person_email of this Organization.  # noqa: E501


        :return: The contact_person_email of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._contact_person_email

    @contact_person_email.setter
    def contact_person_email(self, contact_person_email):
        """Sets the contact_person_email of this Organization.


        :param contact_person_email: The contact_person_email of this Organization.  # noqa: E501
        :type: str
        """

        self._contact_person_email = contact_person_email

    @property
    def address(self):
        """Gets the address of this Organization.  # noqa: E501


        :return: The address of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Organization.


        :param address: The address of this Organization.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this Organization.  # noqa: E501


        :return: The city of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Organization.


        :param city: The city of this Organization.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def zip_code(self):
        """Gets the zip_code of this Organization.  # noqa: E501


        :return: The zip_code of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Organization.


        :param zip_code: The zip_code of this Organization.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def country_code(self):
        """Gets the country_code of this Organization.  # noqa: E501


        :return: The country_code of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Organization.


        :param country_code: The country_code of this Organization.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def state(self):
        """Gets the state of this Organization.  # noqa: E501


        :return: The state of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Organization.


        :param state: The state of this Organization.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(Organization, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Organization):
            return True

        return self.to_dict() != other.to_dict()
