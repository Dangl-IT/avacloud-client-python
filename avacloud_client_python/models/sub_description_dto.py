# coding: utf-8

"""
    AVACloud API 1.52.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.52.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class SubDescriptionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'quantity': 'float',
        'quantity_override': 'float',
        'quantity_components': 'list[CalculationDto]',
        'amount_to_be_entered_by_bidder': 'bool',
        'identifier': 'str',
        'short_text': 'str',
        'long_text': 'str',
        'unit_tag': 'str',
        'html_long_text': 'str',
        'addition_type': 'AdditionTypeDto',
        'standardized_description': 'StandardizedDescriptionDto',
        'execution_description_reference': 'str',
        'project_catalogues': 'list[CatalogueDto]',
        'description_id': 'str',
        'has_bidder_comment_in_html_long_text': 'bool',
        'element_type': 'str',
        'element_type_discriminator': 'str'
    }

    attribute_map = {
        'id': 'id',
        'quantity': 'quantity',
        'quantity_override': 'quantityOverride',
        'quantity_components': 'quantityComponents',
        'amount_to_be_entered_by_bidder': 'amountToBeEnteredByBidder',
        'identifier': 'identifier',
        'short_text': 'shortText',
        'long_text': 'longText',
        'unit_tag': 'unitTag',
        'html_long_text': 'htmlLongText',
        'addition_type': 'additionType',
        'standardized_description': 'standardizedDescription',
        'execution_description_reference': 'executionDescriptionReference',
        'project_catalogues': 'projectCatalogues',
        'description_id': 'descriptionId',
        'has_bidder_comment_in_html_long_text': 'hasBidderCommentInHtmlLongText',
        'element_type': 'elementType',
        'element_type_discriminator': 'elementTypeDiscriminator'
    }

    def __init__(self, id=None, quantity=None, quantity_override=None, quantity_components=None, amount_to_be_entered_by_bidder=None, identifier=None, short_text=None, long_text=None, unit_tag=None, html_long_text=None, addition_type=None, standardized_description=None, execution_description_reference=None, project_catalogues=None, description_id=None, has_bidder_comment_in_html_long_text=None, element_type=None, element_type_discriminator=None, _configuration=None):  # noqa: E501
        """SubDescriptionDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._quantity = None
        self._quantity_override = None
        self._quantity_components = None
        self._amount_to_be_entered_by_bidder = None
        self._identifier = None
        self._short_text = None
        self._long_text = None
        self._unit_tag = None
        self._html_long_text = None
        self._addition_type = None
        self._standardized_description = None
        self._execution_description_reference = None
        self._project_catalogues = None
        self._description_id = None
        self._has_bidder_comment_in_html_long_text = None
        self._element_type = None
        self._element_type_discriminator = None
        self.discriminator = None

        self.id = id
        self.quantity = quantity
        if quantity_override is not None:
            self.quantity_override = quantity_override
        if quantity_components is not None:
            self.quantity_components = quantity_components
        self.amount_to_be_entered_by_bidder = amount_to_be_entered_by_bidder
        if identifier is not None:
            self.identifier = identifier
        if short_text is not None:
            self.short_text = short_text
        if long_text is not None:
            self.long_text = long_text
        if unit_tag is not None:
            self.unit_tag = unit_tag
        if html_long_text is not None:
            self.html_long_text = html_long_text
        self.addition_type = addition_type
        if standardized_description is not None:
            self.standardized_description = standardized_description
        if execution_description_reference is not None:
            self.execution_description_reference = execution_description_reference
        if project_catalogues is not None:
            self.project_catalogues = project_catalogues
        if description_id is not None:
            self.description_id = description_id
        self.has_bidder_comment_in_html_long_text = has_bidder_comment_in_html_long_text
        if element_type is not None:
            self.element_type = element_type
        if element_type_discriminator is not None:
            self.element_type_discriminator = element_type_discriminator

    @property
    def id(self):
        """Gets the id of this SubDescriptionDto.  # noqa: E501

        Elements GUID identifier.  # noqa: E501

        :return: The id of this SubDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubDescriptionDto.

        Elements GUID identifier.  # noqa: E501

        :param id: The id of this SubDescriptionDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def quantity(self):
        """Gets the quantity of this SubDescriptionDto.  # noqa: E501

        Returns the total calculated sum of all quantity assignments. Will return the result rounded to three decimal places.  # noqa: E501

        :return: The quantity of this SubDescriptionDto.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SubDescriptionDto.

        Returns the total calculated sum of all quantity assignments. Will return the result rounded to three decimal places.  # noqa: E501

        :param quantity: The quantity of this SubDescriptionDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def quantity_override(self):
        """Gets the quantity_override of this SubDescriptionDto.  # noqa: E501

        You can use this property to directly set the quantity for this sub description. This will override any given QuantityComponents  # noqa: E501

        :return: The quantity_override of this SubDescriptionDto.  # noqa: E501
        :rtype: float
        """
        return self._quantity_override

    @quantity_override.setter
    def quantity_override(self, quantity_override):
        """Sets the quantity_override of this SubDescriptionDto.

        You can use this property to directly set the quantity for this sub description. This will override any given QuantityComponents  # noqa: E501

        :param quantity_override: The quantity_override of this SubDescriptionDto.  # noqa: E501
        :type: float
        """

        self._quantity_override = quantity_override

    @property
    def quantity_components(self):
        """Gets the quantity_components of this SubDescriptionDto.  # noqa: E501

        Holds quantity information for this sub description. Quantity is listening to changes here and is reporting the total sum of all quantity components.  # noqa: E501

        :return: The quantity_components of this SubDescriptionDto.  # noqa: E501
        :rtype: list[CalculationDto]
        """
        return self._quantity_components

    @quantity_components.setter
    def quantity_components(self, quantity_components):
        """Sets the quantity_components of this SubDescriptionDto.

        Holds quantity information for this sub description. Quantity is listening to changes here and is reporting the total sum of all quantity components.  # noqa: E501

        :param quantity_components: The quantity_components of this SubDescriptionDto.  # noqa: E501
        :type: list[CalculationDto]
        """

        self._quantity_components = quantity_components

    @property
    def amount_to_be_entered_by_bidder(self):
        """Gets the amount_to_be_entered_by_bidder of this SubDescriptionDto.  # noqa: E501

        Indicates if the bidder is asked to specify an amount.  # noqa: E501

        :return: The amount_to_be_entered_by_bidder of this SubDescriptionDto.  # noqa: E501
        :rtype: bool
        """
        return self._amount_to_be_entered_by_bidder

    @amount_to_be_entered_by_bidder.setter
    def amount_to_be_entered_by_bidder(self, amount_to_be_entered_by_bidder):
        """Sets the amount_to_be_entered_by_bidder of this SubDescriptionDto.

        Indicates if the bidder is asked to specify an amount.  # noqa: E501

        :param amount_to_be_entered_by_bidder: The amount_to_be_entered_by_bidder of this SubDescriptionDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and amount_to_be_entered_by_bidder is None:
            raise ValueError("Invalid value for `amount_to_be_entered_by_bidder`, must not be `None`")  # noqa: E501

        self._amount_to_be_entered_by_bidder = amount_to_be_entered_by_bidder

    @property
    def identifier(self):
        """Gets the identifier of this SubDescriptionDto.  # noqa: E501

        Identifier for this SubDescription.  # noqa: E501

        :return: The identifier of this SubDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this SubDescriptionDto.

        Identifier for this SubDescription.  # noqa: E501

        :param identifier: The identifier of this SubDescriptionDto.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def short_text(self):
        """Gets the short_text of this SubDescriptionDto.  # noqa: E501

        Short description for this DescriptionBase element.  # noqa: E501

        :return: The short_text of this SubDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._short_text

    @short_text.setter
    def short_text(self, short_text):
        """Sets the short_text of this SubDescriptionDto.

        Short description for this DescriptionBase element.  # noqa: E501

        :param short_text: The short_text of this SubDescriptionDto.  # noqa: E501
        :type: str
        """

        self._short_text = short_text

    @property
    def long_text(self):
        """Gets the long_text of this SubDescriptionDto.  # noqa: E501

        Detailed description for this DescriptionBase element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.  # noqa: E501

        :return: The long_text of this SubDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._long_text

    @long_text.setter
    def long_text(self, long_text):
        """Sets the long_text of this SubDescriptionDto.

        Detailed description for this DescriptionBase element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.  # noqa: E501

        :param long_text: The long_text of this SubDescriptionDto.  # noqa: E501
        :type: str
        """

        self._long_text = long_text

    @property
    def unit_tag(self):
        """Gets the unit_tag of this SubDescriptionDto.  # noqa: E501

        If this is given, then the sub description has a different unit tag than the parent position.  # noqa: E501

        :return: The unit_tag of this SubDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._unit_tag

    @unit_tag.setter
    def unit_tag(self, unit_tag):
        """Sets the unit_tag of this SubDescriptionDto.

        If this is given, then the sub description has a different unit tag than the parent position.  # noqa: E501

        :param unit_tag: The unit_tag of this SubDescriptionDto.  # noqa: E501
        :type: str
        """

        self._unit_tag = unit_tag

    @property
    def html_long_text(self):
        """Gets the html_long_text of this SubDescriptionDto.  # noqa: E501

        This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.  # noqa: E501

        :return: The html_long_text of this SubDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._html_long_text

    @html_long_text.setter
    def html_long_text(self, html_long_text):
        """Sets the html_long_text of this SubDescriptionDto.

        This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.  # noqa: E501

        :param html_long_text: The html_long_text of this SubDescriptionDto.  # noqa: E501
        :type: str
        """

        self._html_long_text = html_long_text

    @property
    def addition_type(self):
        """Gets the addition_type of this SubDescriptionDto.  # noqa: E501

        Indicates if this DescriptionBase element contains Buyer or Bidder additions to the text.  # noqa: E501

        :return: The addition_type of this SubDescriptionDto.  # noqa: E501
        :rtype: AdditionTypeDto
        """
        return self._addition_type

    @addition_type.setter
    def addition_type(self, addition_type):
        """Sets the addition_type of this SubDescriptionDto.

        Indicates if this DescriptionBase element contains Buyer or Bidder additions to the text.  # noqa: E501

        :param addition_type: The addition_type of this SubDescriptionDto.  # noqa: E501
        :type: AdditionTypeDto
        """
        if self._configuration.client_side_validation and addition_type is None:
            raise ValueError("Invalid value for `addition_type`, must not be `None`")  # noqa: E501

        self._addition_type = addition_type

    @property
    def standardized_description(self):
        """Gets the standardized_description of this SubDescriptionDto.  # noqa: E501

        This represents a standardized description. This means that instead of solely relying on texts to describe a service, external standards and definitions are referenced for a common understanding.  # noqa: E501

        :return: The standardized_description of this SubDescriptionDto.  # noqa: E501
        :rtype: StandardizedDescriptionDto
        """
        return self._standardized_description

    @standardized_description.setter
    def standardized_description(self, standardized_description):
        """Sets the standardized_description of this SubDescriptionDto.

        This represents a standardized description. This means that instead of solely relying on texts to describe a service, external standards and definitions are referenced for a common understanding.  # noqa: E501

        :param standardized_description: The standardized_description of this SubDescriptionDto.  # noqa: E501
        :type: StandardizedDescriptionDto
        """

        self._standardized_description = standardized_description

    @property
    def execution_description_reference(self):
        """Gets the execution_description_reference of this SubDescriptionDto.  # noqa: E501

        This identifier can be used to point to the Id of an ExecutionDescription in the same ServiceSpecification. ExecutionDescriptions act as a way to centrally describe how positions (or sub descriptions) should be executed in practice. Often, the position (or sub description) itself still has text of its own to highlight deviations from that or add more details. When working with import and export features, this property is only supported in GAEB 90 data exchange.  # noqa: E501

        :return: The execution_description_reference of this SubDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._execution_description_reference

    @execution_description_reference.setter
    def execution_description_reference(self, execution_description_reference):
        """Sets the execution_description_reference of this SubDescriptionDto.

        This identifier can be used to point to the Id of an ExecutionDescription in the same ServiceSpecification. ExecutionDescriptions act as a way to centrally describe how positions (or sub descriptions) should be executed in practice. Often, the position (or sub description) itself still has text of its own to highlight deviations from that or add more details. When working with import and export features, this property is only supported in GAEB 90 data exchange.  # noqa: E501

        :param execution_description_reference: The execution_description_reference of this SubDescriptionDto.  # noqa: E501
        :type: str
        """

        self._execution_description_reference = execution_description_reference

    @property
    def project_catalogues(self):
        """Gets the project_catalogues of this SubDescriptionDto.  # noqa: E501

        These are Catalogues that are used within this Calculation. Catalogues are used to describe catalogues, or collections, that can be used to describe elements with commonly known properties. For example, QuantityAssignments use these to categorize themselves. They are propagate to all child elements, e.g. other containers and QuantityAssignments. In the context of a ServiceSpecification, all elements share the same instance of the collection.  # noqa: E501

        :return: The project_catalogues of this SubDescriptionDto.  # noqa: E501
        :rtype: list[CatalogueDto]
        """
        return self._project_catalogues

    @project_catalogues.setter
    def project_catalogues(self, project_catalogues):
        """Sets the project_catalogues of this SubDescriptionDto.

        These are Catalogues that are used within this Calculation. Catalogues are used to describe catalogues, or collections, that can be used to describe elements with commonly known properties. For example, QuantityAssignments use these to categorize themselves. They are propagate to all child elements, e.g. other containers and QuantityAssignments. In the context of a ServiceSpecification, all elements share the same instance of the collection.  # noqa: E501

        :param project_catalogues: The project_catalogues of this SubDescriptionDto.  # noqa: E501
        :type: list[CatalogueDto]
        """

        self._project_catalogues = project_catalogues

    @property
    def description_id(self):
        """Gets the description_id of this SubDescriptionDto.  # noqa: E501

        This is an identifier specific for this description. Some exchange formats, like GAEB XML, use it to identify descriptions. It's different to an elements identifier in that it should only apply to the description component, meaning the text itself.  # noqa: E501

        :return: The description_id of this SubDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._description_id

    @description_id.setter
    def description_id(self, description_id):
        """Sets the description_id of this SubDescriptionDto.

        This is an identifier specific for this description. Some exchange formats, like GAEB XML, use it to identify descriptions. It's different to an elements identifier in that it should only apply to the description component, meaning the text itself.  # noqa: E501

        :param description_id: The description_id of this SubDescriptionDto.  # noqa: E501
        :type: str
        """

        self._description_id = description_id

    @property
    def has_bidder_comment_in_html_long_text(self):
        """Gets the has_bidder_comment_in_html_long_text of this SubDescriptionDto.  # noqa: E501


        :return: The has_bidder_comment_in_html_long_text of this SubDescriptionDto.  # noqa: E501
        :rtype: bool
        """
        return self._has_bidder_comment_in_html_long_text

    @has_bidder_comment_in_html_long_text.setter
    def has_bidder_comment_in_html_long_text(self, has_bidder_comment_in_html_long_text):
        """Sets the has_bidder_comment_in_html_long_text of this SubDescriptionDto.


        :param has_bidder_comment_in_html_long_text: The has_bidder_comment_in_html_long_text of this SubDescriptionDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and has_bidder_comment_in_html_long_text is None:
            raise ValueError("Invalid value for `has_bidder_comment_in_html_long_text`, must not be `None`")  # noqa: E501

        self._has_bidder_comment_in_html_long_text = has_bidder_comment_in_html_long_text

    @property
    def element_type(self):
        """Gets the element_type of this SubDescriptionDto.  # noqa: E501


        :return: The element_type of this SubDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._element_type

    @element_type.setter
    def element_type(self, element_type):
        """Sets the element_type of this SubDescriptionDto.


        :param element_type: The element_type of this SubDescriptionDto.  # noqa: E501
        :type: str
        """

        self._element_type = element_type

    @property
    def element_type_discriminator(self):
        """Gets the element_type_discriminator of this SubDescriptionDto.  # noqa: E501


        :return: The element_type_discriminator of this SubDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._element_type_discriminator

    @element_type_discriminator.setter
    def element_type_discriminator(self, element_type_discriminator):
        """Sets the element_type_discriminator of this SubDescriptionDto.


        :param element_type_discriminator: The element_type_discriminator of this SubDescriptionDto.  # noqa: E501
        :type: str
        """

        self._element_type_discriminator = element_type_discriminator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(SubDescriptionDto, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubDescriptionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubDescriptionDto):
            return True

        return self.to_dict() != other.to_dict()
