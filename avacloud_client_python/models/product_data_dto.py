# coding: utf-8

"""
    AVACloud API 1.41.0

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.41.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class ProductDataDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'vendor': 'PartyInformationDto',
        'articles': 'list[ArticleDataDto]',
        'short_text': 'str',
        'long_text': 'str',
        'html_long_text': 'str'
    }

    attribute_map = {
        'id': 'id',
        'vendor': 'vendor',
        'articles': 'articles',
        'short_text': 'shortText',
        'long_text': 'longText',
        'html_long_text': 'htmlLongText'
    }

    def __init__(self, id=None, vendor=None, articles=None, short_text=None, long_text=None, html_long_text=None, _configuration=None):  # noqa: E501
        """ProductDataDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._vendor = None
        self._articles = None
        self._short_text = None
        self._long_text = None
        self._html_long_text = None
        self.discriminator = None

        self.id = id
        if vendor is not None:
            self.vendor = vendor
        if articles is not None:
            self.articles = articles
        if short_text is not None:
            self.short_text = short_text
        if long_text is not None:
            self.long_text = long_text
        if html_long_text is not None:
            self.html_long_text = html_long_text

    @property
    def id(self):
        """Gets the id of this ProductDataDto.  # noqa: E501

        Elements GUID identifier.  # noqa: E501

        :return: The id of this ProductDataDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductDataDto.

        Elements GUID identifier.  # noqa: E501

        :param id: The id of this ProductDataDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def vendor(self):
        """Gets the vendor of this ProductDataDto.  # noqa: E501

        This PartyInformation is used to describe details about the vendor of this ProductData.  # noqa: E501

        :return: The vendor of this ProductDataDto.  # noqa: E501
        :rtype: PartyInformationDto
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this ProductDataDto.

        This PartyInformation is used to describe details about the vendor of this ProductData.  # noqa: E501

        :param vendor: The vendor of this ProductDataDto.  # noqa: E501
        :type: PartyInformationDto
        """

        self._vendor = vendor

    @property
    def articles(self):
        """Gets the articles of this ProductDataDto.  # noqa: E501

        The collection of ArticleData that describe this product, e.g. a pipe product could be composed out of multiple pipe segments and fittings.  # noqa: E501

        :return: The articles of this ProductDataDto.  # noqa: E501
        :rtype: list[ArticleDataDto]
        """
        return self._articles

    @articles.setter
    def articles(self, articles):
        """Sets the articles of this ProductDataDto.

        The collection of ArticleData that describe this product, e.g. a pipe product could be composed out of multiple pipe segments and fittings.  # noqa: E501

        :param articles: The articles of this ProductDataDto.  # noqa: E501
        :type: list[ArticleDataDto]
        """

        self._articles = articles

    @property
    def short_text(self):
        """Gets the short_text of this ProductDataDto.  # noqa: E501

        Short description for this ITextElement element.  # noqa: E501

        :return: The short_text of this ProductDataDto.  # noqa: E501
        :rtype: str
        """
        return self._short_text

    @short_text.setter
    def short_text(self, short_text):
        """Sets the short_text of this ProductDataDto.

        Short description for this ITextElement element.  # noqa: E501

        :param short_text: The short_text of this ProductDataDto.  # noqa: E501
        :type: str
        """

        self._short_text = short_text

    @property
    def long_text(self):
        """Gets the long_text of this ProductDataDto.  # noqa: E501

        Detailed description for this ITextElement element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.  # noqa: E501

        :return: The long_text of this ProductDataDto.  # noqa: E501
        :rtype: str
        """
        return self._long_text

    @long_text.setter
    def long_text(self, long_text):
        """Sets the long_text of this ProductDataDto.

        Detailed description for this ITextElement element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.  # noqa: E501

        :param long_text: The long_text of this ProductDataDto.  # noqa: E501
        :type: str
        """

        self._long_text = long_text

    @property
    def html_long_text(self):
        """Gets the html_long_text of this ProductDataDto.  # noqa: E501

        This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.  # noqa: E501

        :return: The html_long_text of this ProductDataDto.  # noqa: E501
        :rtype: str
        """
        return self._html_long_text

    @html_long_text.setter
    def html_long_text(self, html_long_text):
        """Sets the html_long_text of this ProductDataDto.

        This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.  # noqa: E501

        :param html_long_text: The html_long_text of this ProductDataDto.  # noqa: E501
        :type: str
        """

        self._html_long_text = html_long_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(ProductDataDto, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductDataDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductDataDto):
            return True

        return self.to_dict() != other.to_dict()

