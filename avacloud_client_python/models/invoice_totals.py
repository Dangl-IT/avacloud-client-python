# coding: utf-8

"""
    AVACloud API 1.52.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.52.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class InvoiceTotals(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_net': 'float',
        'total_allowances': 'float',
        'total_charges': 'float',
        'total_after_deductions': 'float',
        'total_vat_amount': 'float',
        'total_gross': 'float',
        'already_paid_total': 'float',
        'total_to_be_paid': 'float'
    }

    attribute_map = {
        'total_net': 'totalNet',
        'total_allowances': 'totalAllowances',
        'total_charges': 'totalCharges',
        'total_after_deductions': 'totalAfterDeductions',
        'total_vat_amount': 'totalVatAmount',
        'total_gross': 'totalGross',
        'already_paid_total': 'alreadyPaidTotal',
        'total_to_be_paid': 'totalToBePaid'
    }

    def __init__(self, total_net=None, total_allowances=None, total_charges=None, total_after_deductions=None, total_vat_amount=None, total_gross=None, already_paid_total=None, total_to_be_paid=None, _configuration=None):  # noqa: E501
        """InvoiceTotals - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._total_net = None
        self._total_allowances = None
        self._total_charges = None
        self._total_after_deductions = None
        self._total_vat_amount = None
        self._total_gross = None
        self._already_paid_total = None
        self._total_to_be_paid = None
        self.discriminator = None

        if total_net is not None:
            self.total_net = total_net
        if total_allowances is not None:
            self.total_allowances = total_allowances
        if total_charges is not None:
            self.total_charges = total_charges
        if total_after_deductions is not None:
            self.total_after_deductions = total_after_deductions
        if total_vat_amount is not None:
            self.total_vat_amount = total_vat_amount
        if total_gross is not None:
            self.total_gross = total_gross
        if already_paid_total is not None:
            self.already_paid_total = already_paid_total
        if total_to_be_paid is not None:
            self.total_to_be_paid = total_to_be_paid

    @property
    def total_net(self):
        """Gets the total_net of this InvoiceTotals.  # noqa: E501


        :return: The total_net of this InvoiceTotals.  # noqa: E501
        :rtype: float
        """
        return self._total_net

    @total_net.setter
    def total_net(self, total_net):
        """Sets the total_net of this InvoiceTotals.


        :param total_net: The total_net of this InvoiceTotals.  # noqa: E501
        :type: float
        """

        self._total_net = total_net

    @property
    def total_allowances(self):
        """Gets the total_allowances of this InvoiceTotals.  # noqa: E501


        :return: The total_allowances of this InvoiceTotals.  # noqa: E501
        :rtype: float
        """
        return self._total_allowances

    @total_allowances.setter
    def total_allowances(self, total_allowances):
        """Sets the total_allowances of this InvoiceTotals.


        :param total_allowances: The total_allowances of this InvoiceTotals.  # noqa: E501
        :type: float
        """

        self._total_allowances = total_allowances

    @property
    def total_charges(self):
        """Gets the total_charges of this InvoiceTotals.  # noqa: E501


        :return: The total_charges of this InvoiceTotals.  # noqa: E501
        :rtype: float
        """
        return self._total_charges

    @total_charges.setter
    def total_charges(self, total_charges):
        """Sets the total_charges of this InvoiceTotals.


        :param total_charges: The total_charges of this InvoiceTotals.  # noqa: E501
        :type: float
        """

        self._total_charges = total_charges

    @property
    def total_after_deductions(self):
        """Gets the total_after_deductions of this InvoiceTotals.  # noqa: E501


        :return: The total_after_deductions of this InvoiceTotals.  # noqa: E501
        :rtype: float
        """
        return self._total_after_deductions

    @total_after_deductions.setter
    def total_after_deductions(self, total_after_deductions):
        """Sets the total_after_deductions of this InvoiceTotals.


        :param total_after_deductions: The total_after_deductions of this InvoiceTotals.  # noqa: E501
        :type: float
        """

        self._total_after_deductions = total_after_deductions

    @property
    def total_vat_amount(self):
        """Gets the total_vat_amount of this InvoiceTotals.  # noqa: E501


        :return: The total_vat_amount of this InvoiceTotals.  # noqa: E501
        :rtype: float
        """
        return self._total_vat_amount

    @total_vat_amount.setter
    def total_vat_amount(self, total_vat_amount):
        """Sets the total_vat_amount of this InvoiceTotals.


        :param total_vat_amount: The total_vat_amount of this InvoiceTotals.  # noqa: E501
        :type: float
        """

        self._total_vat_amount = total_vat_amount

    @property
    def total_gross(self):
        """Gets the total_gross of this InvoiceTotals.  # noqa: E501


        :return: The total_gross of this InvoiceTotals.  # noqa: E501
        :rtype: float
        """
        return self._total_gross

    @total_gross.setter
    def total_gross(self, total_gross):
        """Sets the total_gross of this InvoiceTotals.


        :param total_gross: The total_gross of this InvoiceTotals.  # noqa: E501
        :type: float
        """

        self._total_gross = total_gross

    @property
    def already_paid_total(self):
        """Gets the already_paid_total of this InvoiceTotals.  # noqa: E501


        :return: The already_paid_total of this InvoiceTotals.  # noqa: E501
        :rtype: float
        """
        return self._already_paid_total

    @already_paid_total.setter
    def already_paid_total(self, already_paid_total):
        """Sets the already_paid_total of this InvoiceTotals.


        :param already_paid_total: The already_paid_total of this InvoiceTotals.  # noqa: E501
        :type: float
        """

        self._already_paid_total = already_paid_total

    @property
    def total_to_be_paid(self):
        """Gets the total_to_be_paid of this InvoiceTotals.  # noqa: E501


        :return: The total_to_be_paid of this InvoiceTotals.  # noqa: E501
        :rtype: float
        """
        return self._total_to_be_paid

    @total_to_be_paid.setter
    def total_to_be_paid(self, total_to_be_paid):
        """Sets the total_to_be_paid of this InvoiceTotals.


        :param total_to_be_paid: The total_to_be_paid of this InvoiceTotals.  # noqa: E501
        :type: float
        """

        self._total_to_be_paid = total_to_be_paid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceTotals, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceTotals):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvoiceTotals):
            return True

        return self.to_dict() != other.to_dict()
