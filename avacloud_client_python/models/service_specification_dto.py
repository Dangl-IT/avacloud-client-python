# coding: utf-8

"""
    AVACloud API 1.30.0

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.30.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class ServiceSpecificationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'project_hourly_wage': 'float',
        'project_tax_rate': 'float',
        'project_price_components': 'list[str]',
        'project_item_number_schema': 'ItemNumberSchemaDto',
        'elements': 'list[IElementDto]',
        'project_labour_time_label': 'str',
        'contains_duplicate_item_numbers': 'bool',
        'contains_duplicate_element_ids': 'bool',
        'ignore_duplicate_item_numbers': 'bool',
        'ignore_duplicate_element_ids': 'bool',
        'total_price_gross_by_tax_rate': 'list[GrossPriceComponentDto]',
        'ignore_child_price_updates': 'bool',
        'deducted_price': 'float',
        'deduction_factor': 'float',
        'absolute_deduction': 'float',
        'total_price': 'float',
        'total_price_gross': 'float',
        'total_price_gross_deducted': 'float',
        'price_type': 'PriceTypeDto',
        'bidder': 'PartyInformationDto',
        'bidder_discriminator': 'str',
        'gaeb_xml_id': 'str',
        'project_information': 'ProjectInformationDto',
        'exchange_phase': 'ExchangePhaseDto',
        'origin': 'OriginDto',
        'origin_detail': 'str',
        'creation_date': 'datetime',
        'offer_by_date': 'datetime',
        'decision_date': 'datetime',
        'submission_location': 'str',
        'description': 'str',
        'name': 'str',
        'price_information': 'PriceInformationDto',
        'project_catalogues': 'list[CatalogueDto]',
        'catalogue_references': 'list[CatalogueReferenceDto]',
        'planned_execution_start': 'datetime',
        'planned_execution_end': 'datetime',
        'contract_date': 'datetime',
        'contract_identifier': 'str',
        'warranty_duration': 'WarrantyDurationDto',
        'warranty_end': 'datetime',
        'approval_date': 'datetime',
        'type_of_approval': 'str',
        'addendum_number': 'str',
        'addendum_status': 'AddendumStatusDto'
    }

    attribute_map = {
        'id': 'id',
        'project_hourly_wage': 'projectHourlyWage',
        'project_tax_rate': 'projectTaxRate',
        'project_price_components': 'projectPriceComponents',
        'project_item_number_schema': 'projectItemNumberSchema',
        'elements': 'elements',
        'project_labour_time_label': 'projectLabourTimeLabel',
        'contains_duplicate_item_numbers': 'containsDuplicateItemNumbers',
        'contains_duplicate_element_ids': 'containsDuplicateElementIds',
        'ignore_duplicate_item_numbers': 'ignoreDuplicateItemNumbers',
        'ignore_duplicate_element_ids': 'ignoreDuplicateElementIds',
        'total_price_gross_by_tax_rate': 'totalPriceGrossByTaxRate',
        'ignore_child_price_updates': 'ignoreChildPriceUpdates',
        'deducted_price': 'deductedPrice',
        'deduction_factor': 'deductionFactor',
        'absolute_deduction': 'absoluteDeduction',
        'total_price': 'totalPrice',
        'total_price_gross': 'totalPriceGross',
        'total_price_gross_deducted': 'totalPriceGrossDeducted',
        'price_type': 'priceType',
        'bidder': 'bidder',
        'bidder_discriminator': 'bidderDiscriminator',
        'gaeb_xml_id': 'gaebXmlId',
        'project_information': 'projectInformation',
        'exchange_phase': 'exchangePhase',
        'origin': 'origin',
        'origin_detail': 'originDetail',
        'creation_date': 'creationDate',
        'offer_by_date': 'offerByDate',
        'decision_date': 'decisionDate',
        'submission_location': 'submissionLocation',
        'description': 'description',
        'name': 'name',
        'price_information': 'priceInformation',
        'project_catalogues': 'projectCatalogues',
        'catalogue_references': 'catalogueReferences',
        'planned_execution_start': 'plannedExecutionStart',
        'planned_execution_end': 'plannedExecutionEnd',
        'contract_date': 'contractDate',
        'contract_identifier': 'contractIdentifier',
        'warranty_duration': 'warrantyDuration',
        'warranty_end': 'warrantyEnd',
        'approval_date': 'approvalDate',
        'type_of_approval': 'typeOfApproval',
        'addendum_number': 'addendumNumber',
        'addendum_status': 'addendumStatus'
    }

    def __init__(self, id=None, project_hourly_wage=None, project_tax_rate=None, project_price_components=None, project_item_number_schema=None, elements=None, project_labour_time_label=None, contains_duplicate_item_numbers=None, contains_duplicate_element_ids=None, ignore_duplicate_item_numbers=None, ignore_duplicate_element_ids=None, total_price_gross_by_tax_rate=None, ignore_child_price_updates=None, deducted_price=None, deduction_factor=None, absolute_deduction=None, total_price=None, total_price_gross=None, total_price_gross_deducted=None, price_type=None, bidder=None, bidder_discriminator=None, gaeb_xml_id=None, project_information=None, exchange_phase=None, origin=None, origin_detail=None, creation_date=None, offer_by_date=None, decision_date=None, submission_location=None, description=None, name=None, price_information=None, project_catalogues=None, catalogue_references=None, planned_execution_start=None, planned_execution_end=None, contract_date=None, contract_identifier=None, warranty_duration=None, warranty_end=None, approval_date=None, type_of_approval=None, addendum_number=None, addendum_status=None, _configuration=None):  # noqa: E501
        """ServiceSpecificationDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._project_hourly_wage = None
        self._project_tax_rate = None
        self._project_price_components = None
        self._project_item_number_schema = None
        self._elements = None
        self._project_labour_time_label = None
        self._contains_duplicate_item_numbers = None
        self._contains_duplicate_element_ids = None
        self._ignore_duplicate_item_numbers = None
        self._ignore_duplicate_element_ids = None
        self._total_price_gross_by_tax_rate = None
        self._ignore_child_price_updates = None
        self._deducted_price = None
        self._deduction_factor = None
        self._absolute_deduction = None
        self._total_price = None
        self._total_price_gross = None
        self._total_price_gross_deducted = None
        self._price_type = None
        self._bidder = None
        self._bidder_discriminator = None
        self._gaeb_xml_id = None
        self._project_information = None
        self._exchange_phase = None
        self._origin = None
        self._origin_detail = None
        self._creation_date = None
        self._offer_by_date = None
        self._decision_date = None
        self._submission_location = None
        self._description = None
        self._name = None
        self._price_information = None
        self._project_catalogues = None
        self._catalogue_references = None
        self._planned_execution_start = None
        self._planned_execution_end = None
        self._contract_date = None
        self._contract_identifier = None
        self._warranty_duration = None
        self._warranty_end = None
        self._approval_date = None
        self._type_of_approval = None
        self._addendum_number = None
        self._addendum_status = None
        self.discriminator = None

        self.id = id
        self.project_hourly_wage = project_hourly_wage
        self.project_tax_rate = project_tax_rate
        if project_price_components is not None:
            self.project_price_components = project_price_components
        if project_item_number_schema is not None:
            self.project_item_number_schema = project_item_number_schema
        if elements is not None:
            self.elements = elements
        if project_labour_time_label is not None:
            self.project_labour_time_label = project_labour_time_label
        self.contains_duplicate_item_numbers = contains_duplicate_item_numbers
        self.contains_duplicate_element_ids = contains_duplicate_element_ids
        self.ignore_duplicate_item_numbers = ignore_duplicate_item_numbers
        self.ignore_duplicate_element_ids = ignore_duplicate_element_ids
        if total_price_gross_by_tax_rate is not None:
            self.total_price_gross_by_tax_rate = total_price_gross_by_tax_rate
        self.ignore_child_price_updates = ignore_child_price_updates
        self.deducted_price = deducted_price
        self.deduction_factor = deduction_factor
        if absolute_deduction is not None:
            self.absolute_deduction = absolute_deduction
        self.total_price = total_price
        self.total_price_gross = total_price_gross
        self.total_price_gross_deducted = total_price_gross_deducted
        self.price_type = price_type
        if bidder is not None:
            self.bidder = bidder
        if bidder_discriminator is not None:
            self.bidder_discriminator = bidder_discriminator
        if gaeb_xml_id is not None:
            self.gaeb_xml_id = gaeb_xml_id
        if project_information is not None:
            self.project_information = project_information
        self.exchange_phase = exchange_phase
        self.origin = origin
        if origin_detail is not None:
            self.origin_detail = origin_detail
        if creation_date is not None:
            self.creation_date = creation_date
        if offer_by_date is not None:
            self.offer_by_date = offer_by_date
        if decision_date is not None:
            self.decision_date = decision_date
        if submission_location is not None:
            self.submission_location = submission_location
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if price_information is not None:
            self.price_information = price_information
        if project_catalogues is not None:
            self.project_catalogues = project_catalogues
        if catalogue_references is not None:
            self.catalogue_references = catalogue_references
        if planned_execution_start is not None:
            self.planned_execution_start = planned_execution_start
        if planned_execution_end is not None:
            self.planned_execution_end = planned_execution_end
        if contract_date is not None:
            self.contract_date = contract_date
        if contract_identifier is not None:
            self.contract_identifier = contract_identifier
        if warranty_duration is not None:
            self.warranty_duration = warranty_duration
        if warranty_end is not None:
            self.warranty_end = warranty_end
        if approval_date is not None:
            self.approval_date = approval_date
        if type_of_approval is not None:
            self.type_of_approval = type_of_approval
        if addendum_number is not None:
            self.addendum_number = addendum_number
        if addendum_status is not None:
            self.addendum_status = addendum_status

    @property
    def id(self):
        """Gets the id of this ServiceSpecificationDto.  # noqa: E501

        Elements GUID identifier.  # noqa: E501

        :return: The id of this ServiceSpecificationDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceSpecificationDto.

        Elements GUID identifier.  # noqa: E501

        :param id: The id of this ServiceSpecificationDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def project_hourly_wage(self):
        """Gets the project_hourly_wage of this ServiceSpecificationDto.  # noqa: E501

        The hourly wage that is used within this ElementContainerBase. Will be propagated to child elements.  # noqa: E501

        :return: The project_hourly_wage of this ServiceSpecificationDto.  # noqa: E501
        :rtype: float
        """
        return self._project_hourly_wage

    @project_hourly_wage.setter
    def project_hourly_wage(self, project_hourly_wage):
        """Sets the project_hourly_wage of this ServiceSpecificationDto.

        The hourly wage that is used within this ElementContainerBase. Will be propagated to child elements.  # noqa: E501

        :param project_hourly_wage: The project_hourly_wage of this ServiceSpecificationDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and project_hourly_wage is None:
            raise ValueError("Invalid value for `project_hourly_wage`, must not be `None`")  # noqa: E501

        self._project_hourly_wage = project_hourly_wage

    @property
    def project_tax_rate(self):
        """Gets the project_tax_rate of this ServiceSpecificationDto.  # noqa: E501

        The tax rate that is used within this ElementContainerBase. Will be propagated to child elements.  # noqa: E501

        :return: The project_tax_rate of this ServiceSpecificationDto.  # noqa: E501
        :rtype: float
        """
        return self._project_tax_rate

    @project_tax_rate.setter
    def project_tax_rate(self, project_tax_rate):
        """Sets the project_tax_rate of this ServiceSpecificationDto.

        The tax rate that is used within this ElementContainerBase. Will be propagated to child elements.  # noqa: E501

        :param project_tax_rate: The project_tax_rate of this ServiceSpecificationDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and project_tax_rate is None:
            raise ValueError("Invalid value for `project_tax_rate`, must not be `None`")  # noqa: E501

        self._project_tax_rate = project_tax_rate

    @property
    def project_price_components(self):
        """Gets the project_price_components of this ServiceSpecificationDto.  # noqa: E501

        The price components that are used within this project. They are ignored during Json deserialization because they will be set from the parent project.  # noqa: E501

        :return: The project_price_components of this ServiceSpecificationDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._project_price_components

    @project_price_components.setter
    def project_price_components(self, project_price_components):
        """Sets the project_price_components of this ServiceSpecificationDto.

        The price components that are used within this project. They are ignored during Json deserialization because they will be set from the parent project.  # noqa: E501

        :param project_price_components: The project_price_components of this ServiceSpecificationDto.  # noqa: E501
        :type: list[str]
        """

        self._project_price_components = project_price_components

    @property
    def project_item_number_schema(self):
        """Gets the project_item_number_schema of this ServiceSpecificationDto.  # noqa: E501

        The ItemNumberSchema that is used within this project.  # noqa: E501

        :return: The project_item_number_schema of this ServiceSpecificationDto.  # noqa: E501
        :rtype: ItemNumberSchemaDto
        """
        return self._project_item_number_schema

    @project_item_number_schema.setter
    def project_item_number_schema(self, project_item_number_schema):
        """Sets the project_item_number_schema of this ServiceSpecificationDto.

        The ItemNumberSchema that is used within this project.  # noqa: E501

        :param project_item_number_schema: The project_item_number_schema of this ServiceSpecificationDto.  # noqa: E501
        :type: ItemNumberSchemaDto
        """

        self._project_item_number_schema = project_item_number_schema

    @property
    def elements(self):
        """Gets the elements of this ServiceSpecificationDto.  # noqa: E501

        The IElements within this ElementContainerBase.  # noqa: E501

        :return: The elements of this ServiceSpecificationDto.  # noqa: E501
        :rtype: list[IElementDto]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this ServiceSpecificationDto.

        The IElements within this ElementContainerBase.  # noqa: E501

        :param elements: The elements of this ServiceSpecificationDto.  # noqa: E501
        :type: list[IElementDto]
        """

        self._elements = elements

    @property
    def project_labour_time_label(self):
        """Gets the project_labour_time_label of this ServiceSpecificationDto.  # noqa: E501

        The label used in the parent Project to mark labour time, e.g. \"Hours\" or \"Stunden\".  # noqa: E501

        :return: The project_labour_time_label of this ServiceSpecificationDto.  # noqa: E501
        :rtype: str
        """
        return self._project_labour_time_label

    @project_labour_time_label.setter
    def project_labour_time_label(self, project_labour_time_label):
        """Sets the project_labour_time_label of this ServiceSpecificationDto.

        The label used in the parent Project to mark labour time, e.g. \"Hours\" or \"Stunden\".  # noqa: E501

        :param project_labour_time_label: The project_labour_time_label of this ServiceSpecificationDto.  # noqa: E501
        :type: str
        """

        self._project_labour_time_label = project_labour_time_label

    @property
    def contains_duplicate_item_numbers(self):
        """Gets the contains_duplicate_item_numbers of this ServiceSpecificationDto.  # noqa: E501

        Indicates if there are child IElements that have conflicting, duplicated ItemNumbers or if any child ElementContainerBase elements themselves contain duplicate ItemNumber s. Will always indicate false when told to ignore duplicate item numbers.  # noqa: E501

        :return: The contains_duplicate_item_numbers of this ServiceSpecificationDto.  # noqa: E501
        :rtype: bool
        """
        return self._contains_duplicate_item_numbers

    @contains_duplicate_item_numbers.setter
    def contains_duplicate_item_numbers(self, contains_duplicate_item_numbers):
        """Sets the contains_duplicate_item_numbers of this ServiceSpecificationDto.

        Indicates if there are child IElements that have conflicting, duplicated ItemNumbers or if any child ElementContainerBase elements themselves contain duplicate ItemNumber s. Will always indicate false when told to ignore duplicate item numbers.  # noqa: E501

        :param contains_duplicate_item_numbers: The contains_duplicate_item_numbers of this ServiceSpecificationDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and contains_duplicate_item_numbers is None:
            raise ValueError("Invalid value for `contains_duplicate_item_numbers`, must not be `None`")  # noqa: E501

        self._contains_duplicate_item_numbers = contains_duplicate_item_numbers

    @property
    def contains_duplicate_element_ids(self):
        """Gets the contains_duplicate_element_ids of this ServiceSpecificationDto.  # noqa: E501

        Indicates if there are child IElements that have conflicting, duplicated Ids or if any child ElementContainerBase elements themselves contain duplicate Id s. Will always indicate false when told to ignore duplicate item numbers.  # noqa: E501

        :return: The contains_duplicate_element_ids of this ServiceSpecificationDto.  # noqa: E501
        :rtype: bool
        """
        return self._contains_duplicate_element_ids

    @contains_duplicate_element_ids.setter
    def contains_duplicate_element_ids(self, contains_duplicate_element_ids):
        """Sets the contains_duplicate_element_ids of this ServiceSpecificationDto.

        Indicates if there are child IElements that have conflicting, duplicated Ids or if any child ElementContainerBase elements themselves contain duplicate Id s. Will always indicate false when told to ignore duplicate item numbers.  # noqa: E501

        :param contains_duplicate_element_ids: The contains_duplicate_element_ids of this ServiceSpecificationDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and contains_duplicate_element_ids is None:
            raise ValueError("Invalid value for `contains_duplicate_element_ids`, must not be `None`")  # noqa: E501

        self._contains_duplicate_element_ids = contains_duplicate_element_ids

    @property
    def ignore_duplicate_item_numbers(self):
        """Gets the ignore_duplicate_item_numbers of this ServiceSpecificationDto.  # noqa: E501

        Indicate if duplicated ItemNumbers within child elements are to be ignored. Will not perform checks for duplicates if yes.  # noqa: E501

        :return: The ignore_duplicate_item_numbers of this ServiceSpecificationDto.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_duplicate_item_numbers

    @ignore_duplicate_item_numbers.setter
    def ignore_duplicate_item_numbers(self, ignore_duplicate_item_numbers):
        """Sets the ignore_duplicate_item_numbers of this ServiceSpecificationDto.

        Indicate if duplicated ItemNumbers within child elements are to be ignored. Will not perform checks for duplicates if yes.  # noqa: E501

        :param ignore_duplicate_item_numbers: The ignore_duplicate_item_numbers of this ServiceSpecificationDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and ignore_duplicate_item_numbers is None:
            raise ValueError("Invalid value for `ignore_duplicate_item_numbers`, must not be `None`")  # noqa: E501

        self._ignore_duplicate_item_numbers = ignore_duplicate_item_numbers

    @property
    def ignore_duplicate_element_ids(self):
        """Gets the ignore_duplicate_element_ids of this ServiceSpecificationDto.  # noqa: E501

        Indicate if duplicated Ids within child elements are to be ignored. Will not perform checks for duplicates if yes.  # noqa: E501

        :return: The ignore_duplicate_element_ids of this ServiceSpecificationDto.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_duplicate_element_ids

    @ignore_duplicate_element_ids.setter
    def ignore_duplicate_element_ids(self, ignore_duplicate_element_ids):
        """Sets the ignore_duplicate_element_ids of this ServiceSpecificationDto.

        Indicate if duplicated Ids within child elements are to be ignored. Will not perform checks for duplicates if yes.  # noqa: E501

        :param ignore_duplicate_element_ids: The ignore_duplicate_element_ids of this ServiceSpecificationDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and ignore_duplicate_element_ids is None:
            raise ValueError("Invalid value for `ignore_duplicate_element_ids`, must not be `None`")  # noqa: E501

        self._ignore_duplicate_element_ids = ignore_duplicate_element_ids

    @property
    def total_price_gross_by_tax_rate(self):
        """Gets the total_price_gross_by_tax_rate of this ServiceSpecificationDto.  # noqa: E501

        Price composition by tax rate.  # noqa: E501

        :return: The total_price_gross_by_tax_rate of this ServiceSpecificationDto.  # noqa: E501
        :rtype: list[GrossPriceComponentDto]
        """
        return self._total_price_gross_by_tax_rate

    @total_price_gross_by_tax_rate.setter
    def total_price_gross_by_tax_rate(self, total_price_gross_by_tax_rate):
        """Sets the total_price_gross_by_tax_rate of this ServiceSpecificationDto.

        Price composition by tax rate.  # noqa: E501

        :param total_price_gross_by_tax_rate: The total_price_gross_by_tax_rate of this ServiceSpecificationDto.  # noqa: E501
        :type: list[GrossPriceComponentDto]
        """

        self._total_price_gross_by_tax_rate = total_price_gross_by_tax_rate

    @property
    def ignore_child_price_updates(self):
        """Gets the ignore_child_price_updates of this ServiceSpecificationDto.  # noqa: E501

        Internally used to indicate that a propagation is currently done, this is done to not recalculate every single result from a lot of changes when it is sufficient to calculate the total price at once.  # noqa: E501

        :return: The ignore_child_price_updates of this ServiceSpecificationDto.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_child_price_updates

    @ignore_child_price_updates.setter
    def ignore_child_price_updates(self, ignore_child_price_updates):
        """Sets the ignore_child_price_updates of this ServiceSpecificationDto.

        Internally used to indicate that a propagation is currently done, this is done to not recalculate every single result from a lot of changes when it is sufficient to calculate the total price at once.  # noqa: E501

        :param ignore_child_price_updates: The ignore_child_price_updates of this ServiceSpecificationDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and ignore_child_price_updates is None:
            raise ValueError("Invalid value for `ignore_child_price_updates`, must not be `None`")  # noqa: E501

        self._ignore_child_price_updates = ignore_child_price_updates

    @property
    def deducted_price(self):
        """Gets the deducted_price of this ServiceSpecificationDto.  # noqa: E501

        Net price after applied deductions.  # noqa: E501

        :return: The deducted_price of this ServiceSpecificationDto.  # noqa: E501
        :rtype: float
        """
        return self._deducted_price

    @deducted_price.setter
    def deducted_price(self, deducted_price):
        """Sets the deducted_price of this ServiceSpecificationDto.

        Net price after applied deductions.  # noqa: E501

        :param deducted_price: The deducted_price of this ServiceSpecificationDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and deducted_price is None:
            raise ValueError("Invalid value for `deducted_price`, must not be `None`")  # noqa: E501

        self._deducted_price = deducted_price

    @property
    def deduction_factor(self):
        """Gets the deduction_factor of this ServiceSpecificationDto.  # noqa: E501

        Factor of applied deductions to the total price. For example, \"0.03\" means that a 3% deduction is to be applied.  # noqa: E501

        :return: The deduction_factor of this ServiceSpecificationDto.  # noqa: E501
        :rtype: float
        """
        return self._deduction_factor

    @deduction_factor.setter
    def deduction_factor(self, deduction_factor):
        """Sets the deduction_factor of this ServiceSpecificationDto.

        Factor of applied deductions to the total price. For example, \"0.03\" means that a 3% deduction is to be applied.  # noqa: E501

        :param deduction_factor: The deduction_factor of this ServiceSpecificationDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and deduction_factor is None:
            raise ValueError("Invalid value for `deduction_factor`, must not be `None`")  # noqa: E501

        self._deduction_factor = deduction_factor

    @property
    def absolute_deduction(self):
        """Gets the absolute_deduction of this ServiceSpecificationDto.  # noqa: E501

        The exact amount of the discount as an absolute value. For backwards compatibility reasons, setting this value will also set a calculated value to DeductionFactor, which will also be updated in case the total price is changed to reflect a relative value of the absolute discount sum.  # noqa: E501

        :return: The absolute_deduction of this ServiceSpecificationDto.  # noqa: E501
        :rtype: float
        """
        return self._absolute_deduction

    @absolute_deduction.setter
    def absolute_deduction(self, absolute_deduction):
        """Sets the absolute_deduction of this ServiceSpecificationDto.

        The exact amount of the discount as an absolute value. For backwards compatibility reasons, setting this value will also set a calculated value to DeductionFactor, which will also be updated in case the total price is changed to reflect a relative value of the absolute discount sum.  # noqa: E501

        :param absolute_deduction: The absolute_deduction of this ServiceSpecificationDto.  # noqa: E501
        :type: float
        """

        self._absolute_deduction = absolute_deduction

    @property
    def total_price(self):
        """Gets the total_price of this ServiceSpecificationDto.  # noqa: E501

        Will return this ElementContainerBase's total price.  # noqa: E501

        :return: The total_price of this ServiceSpecificationDto.  # noqa: E501
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this ServiceSpecificationDto.

        Will return this ElementContainerBase's total price.  # noqa: E501

        :param total_price: The total_price of this ServiceSpecificationDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and total_price is None:
            raise ValueError("Invalid value for `total_price`, must not be `None`")  # noqa: E501

        self._total_price = total_price

    @property
    def total_price_gross(self):
        """Gets the total_price_gross of this ServiceSpecificationDto.  # noqa: E501

        The total gross price for this ElementContainerBase including all child elements.  # noqa: E501

        :return: The total_price_gross of this ServiceSpecificationDto.  # noqa: E501
        :rtype: float
        """
        return self._total_price_gross

    @total_price_gross.setter
    def total_price_gross(self, total_price_gross):
        """Sets the total_price_gross of this ServiceSpecificationDto.

        The total gross price for this ElementContainerBase including all child elements.  # noqa: E501

        :param total_price_gross: The total_price_gross of this ServiceSpecificationDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and total_price_gross is None:
            raise ValueError("Invalid value for `total_price_gross`, must not be `None`")  # noqa: E501

        self._total_price_gross = total_price_gross

    @property
    def total_price_gross_deducted(self):
        """Gets the total_price_gross_deducted of this ServiceSpecificationDto.  # noqa: E501

        Total gross price after applied deductions.  # noqa: E501

        :return: The total_price_gross_deducted of this ServiceSpecificationDto.  # noqa: E501
        :rtype: float
        """
        return self._total_price_gross_deducted

    @total_price_gross_deducted.setter
    def total_price_gross_deducted(self, total_price_gross_deducted):
        """Sets the total_price_gross_deducted of this ServiceSpecificationDto.

        Total gross price after applied deductions.  # noqa: E501

        :param total_price_gross_deducted: The total_price_gross_deducted of this ServiceSpecificationDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and total_price_gross_deducted is None:
            raise ValueError("Invalid value for `total_price_gross_deducted`, must not be `None`")  # noqa: E501

        self._total_price_gross_deducted = total_price_gross_deducted

    @property
    def price_type(self):
        """Gets the price_type of this ServiceSpecificationDto.  # noqa: E501

        Indicates the PriceType of this ElementContainerBase, whether it should factor into total costs or not.  # noqa: E501

        :return: The price_type of this ServiceSpecificationDto.  # noqa: E501
        :rtype: PriceTypeDto
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this ServiceSpecificationDto.

        Indicates the PriceType of this ElementContainerBase, whether it should factor into total costs or not.  # noqa: E501

        :param price_type: The price_type of this ServiceSpecificationDto.  # noqa: E501
        :type: PriceTypeDto
        """
        if self._configuration.client_side_validation and price_type is None:
            raise ValueError("Invalid value for `price_type`, must not be `None`")  # noqa: E501

        self._price_type = price_type

    @property
    def bidder(self):
        """Gets the bidder of this ServiceSpecificationDto.  # noqa: E501

        Information about the bidder.  # noqa: E501

        :return: The bidder of this ServiceSpecificationDto.  # noqa: E501
        :rtype: PartyInformationDto
        """
        return self._bidder

    @bidder.setter
    def bidder(self, bidder):
        """Sets the bidder of this ServiceSpecificationDto.

        Information about the bidder.  # noqa: E501

        :param bidder: The bidder of this ServiceSpecificationDto.  # noqa: E501
        :type: PartyInformationDto
        """

        self._bidder = bidder

    @property
    def bidder_discriminator(self):
        """Gets the bidder_discriminator of this ServiceSpecificationDto.  # noqa: E501

        This discriminator is used to identify different bidders in a project. It is different from the Identifier property in the Bidder in that the BidderDiscriminator is intended to be a numerical identifier within a project, while the Identifier does uniquely identify a bidder in the system independent of a specific project. This property should map to \"Bieternummer\" or \"BidderNo\" in GAEB.  # noqa: E501

        :return: The bidder_discriminator of this ServiceSpecificationDto.  # noqa: E501
        :rtype: str
        """
        return self._bidder_discriminator

    @bidder_discriminator.setter
    def bidder_discriminator(self, bidder_discriminator):
        """Sets the bidder_discriminator of this ServiceSpecificationDto.

        This discriminator is used to identify different bidders in a project. It is different from the Identifier property in the Bidder in that the BidderDiscriminator is intended to be a numerical identifier within a project, while the Identifier does uniquely identify a bidder in the system independent of a specific project. This property should map to \"Bieternummer\" or \"BidderNo\" in GAEB.  # noqa: E501

        :param bidder_discriminator: The bidder_discriminator of this ServiceSpecificationDto.  # noqa: E501
        :type: str
        """

        self._bidder_discriminator = bidder_discriminator

    @property
    def gaeb_xml_id(self):
        """Gets the gaeb_xml_id of this ServiceSpecificationDto.  # noqa: E501

        This is used to store the GAEB XML Id within this ServiceSpecification. This data is not used for any calculations or evaluations but only for GAEB serialization and deserialization.  # noqa: E501

        :return: The gaeb_xml_id of this ServiceSpecificationDto.  # noqa: E501
        :rtype: str
        """
        return self._gaeb_xml_id

    @gaeb_xml_id.setter
    def gaeb_xml_id(self, gaeb_xml_id):
        """Sets the gaeb_xml_id of this ServiceSpecificationDto.

        This is used to store the GAEB XML Id within this ServiceSpecification. This data is not used for any calculations or evaluations but only for GAEB serialization and deserialization.  # noqa: E501

        :param gaeb_xml_id: The gaeb_xml_id of this ServiceSpecificationDto.  # noqa: E501
        :type: str
        """

        self._gaeb_xml_id = gaeb_xml_id

    @property
    def project_information(self):
        """Gets the project_information of this ServiceSpecificationDto.  # noqa: E501

        The ProjectInformation used within the Project in which this ElementContainerBase is contained. This is reference equal to the ProjectInformation used in the parent project.  # noqa: E501

        :return: The project_information of this ServiceSpecificationDto.  # noqa: E501
        :rtype: ProjectInformationDto
        """
        return self._project_information

    @project_information.setter
    def project_information(self, project_information):
        """Sets the project_information of this ServiceSpecificationDto.

        The ProjectInformation used within the Project in which this ElementContainerBase is contained. This is reference equal to the ProjectInformation used in the parent project.  # noqa: E501

        :param project_information: The project_information of this ServiceSpecificationDto.  # noqa: E501
        :type: ProjectInformationDto
        """

        self._project_information = project_information

    @property
    def exchange_phase(self):
        """Gets the exchange_phase of this ServiceSpecificationDto.  # noqa: E501

        This service specifications exchange phase, i.e. the current status in the project it is intended to be used (such as request for offer, offer, awarding...).  # noqa: E501

        :return: The exchange_phase of this ServiceSpecificationDto.  # noqa: E501
        :rtype: ExchangePhaseDto
        """
        return self._exchange_phase

    @exchange_phase.setter
    def exchange_phase(self, exchange_phase):
        """Sets the exchange_phase of this ServiceSpecificationDto.

        This service specifications exchange phase, i.e. the current status in the project it is intended to be used (such as request for offer, offer, awarding...).  # noqa: E501

        :param exchange_phase: The exchange_phase of this ServiceSpecificationDto.  # noqa: E501
        :type: ExchangePhaseDto
        """
        if self._configuration.client_side_validation and exchange_phase is None:
            raise ValueError("Invalid value for `exchange_phase`, must not be `None`")  # noqa: E501

        self._exchange_phase = exchange_phase

    @property
    def origin(self):
        """Gets the origin of this ServiceSpecificationDto.  # noqa: E501

        This indicates where the service specification originates, i.e. from an exchange file format or self created. If applicable, additional information is present in the OriginDetail property.  # noqa: E501

        :return: The origin of this ServiceSpecificationDto.  # noqa: E501
        :rtype: OriginDto
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ServiceSpecificationDto.

        This indicates where the service specification originates, i.e. from an exchange file format or self created. If applicable, additional information is present in the OriginDetail property.  # noqa: E501

        :param origin: The origin of this ServiceSpecificationDto.  # noqa: E501
        :type: OriginDto
        """
        if self._configuration.client_side_validation and origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")  # noqa: E501

        self._origin = origin

    @property
    def origin_detail(self):
        """Gets the origin_detail of this ServiceSpecificationDto.  # noqa: E501

        This property complements the Origin property. Some formats, e.g. GaebXml might have additional information attached, e.g. GAEB XML V3.2 oder GAEB XML V3.1. This string property is used to hold such data. The Dangl.AVA module does not have a list of possible values, since this is defined in the native format assemblies, e.g. Dangl.GAEB or Dangl.Oenorm.  # noqa: E501

        :return: The origin_detail of this ServiceSpecificationDto.  # noqa: E501
        :rtype: str
        """
        return self._origin_detail

    @origin_detail.setter
    def origin_detail(self, origin_detail):
        """Sets the origin_detail of this ServiceSpecificationDto.

        This property complements the Origin property. Some formats, e.g. GaebXml might have additional information attached, e.g. GAEB XML V3.2 oder GAEB XML V3.1. This string property is used to hold such data. The Dangl.AVA module does not have a list of possible values, since this is defined in the native format assemblies, e.g. Dangl.GAEB or Dangl.Oenorm.  # noqa: E501

        :param origin_detail: The origin_detail of this ServiceSpecificationDto.  # noqa: E501
        :type: str
        """

        self._origin_detail = origin_detail

    @property
    def creation_date(self):
        """Gets the creation_date of this ServiceSpecificationDto.  # noqa: E501

        Creation date of this ServiceSpecification.  # noqa: E501

        :return: The creation_date of this ServiceSpecificationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ServiceSpecificationDto.

        Creation date of this ServiceSpecification.  # noqa: E501

        :param creation_date: The creation_date of this ServiceSpecificationDto.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def offer_by_date(self):
        """Gets the offer_by_date of this ServiceSpecificationDto.  # noqa: E501

        Date indicating until when an offer has to be submitted. In German, this is often called the \"Eröffnungstermin\"  # noqa: E501

        :return: The offer_by_date of this ServiceSpecificationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._offer_by_date

    @offer_by_date.setter
    def offer_by_date(self, offer_by_date):
        """Sets the offer_by_date of this ServiceSpecificationDto.

        Date indicating until when an offer has to be submitted. In German, this is often called the \"Eröffnungstermin\"  # noqa: E501

        :param offer_by_date: The offer_by_date of this ServiceSpecificationDto.  # noqa: E501
        :type: datetime
        """

        self._offer_by_date = offer_by_date

    @property
    def decision_date(self):
        """Gets the decision_date of this ServiceSpecificationDto.  # noqa: E501

        Date indicating by when the buyer will select a contractor.  # noqa: E501

        :return: The decision_date of this ServiceSpecificationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._decision_date

    @decision_date.setter
    def decision_date(self, decision_date):
        """Sets the decision_date of this ServiceSpecificationDto.

        Date indicating by when the buyer will select a contractor.  # noqa: E501

        :param decision_date: The decision_date of this ServiceSpecificationDto.  # noqa: E501
        :type: datetime
        """

        self._decision_date = decision_date

    @property
    def submission_location(self):
        """Gets the submission_location of this ServiceSpecificationDto.  # noqa: E501

        String indicating where the physical submission of the offer is taking place.  # noqa: E501

        :return: The submission_location of this ServiceSpecificationDto.  # noqa: E501
        :rtype: str
        """
        return self._submission_location

    @submission_location.setter
    def submission_location(self, submission_location):
        """Sets the submission_location of this ServiceSpecificationDto.

        String indicating where the physical submission of the offer is taking place.  # noqa: E501

        :param submission_location: The submission_location of this ServiceSpecificationDto.  # noqa: E501
        :type: str
        """

        self._submission_location = submission_location

    @property
    def description(self):
        """Gets the description of this ServiceSpecificationDto.  # noqa: E501

        Description of this ServiceSpecification.  # noqa: E501

        :return: The description of this ServiceSpecificationDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceSpecificationDto.

        Description of this ServiceSpecification.  # noqa: E501

        :param description: The description of this ServiceSpecificationDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this ServiceSpecificationDto.  # noqa: E501

        The name of this ServiceSpecification.  # noqa: E501

        :return: The name of this ServiceSpecificationDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceSpecificationDto.

        The name of this ServiceSpecification.  # noqa: E501

        :param name: The name of this ServiceSpecificationDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def price_information(self):
        """Gets the price_information of this ServiceSpecificationDto.  # noqa: E501

        This PriceInformation contains global data for the ServiceSpecification. When inside a Project, do not set this property manually.  # noqa: E501

        :return: The price_information of this ServiceSpecificationDto.  # noqa: E501
        :rtype: PriceInformationDto
        """
        return self._price_information

    @price_information.setter
    def price_information(self, price_information):
        """Sets the price_information of this ServiceSpecificationDto.

        This PriceInformation contains global data for the ServiceSpecification. When inside a Project, do not set this property manually.  # noqa: E501

        :param price_information: The price_information of this ServiceSpecificationDto.  # noqa: E501
        :type: PriceInformationDto
        """

        self._price_information = price_information

    @property
    def project_catalogues(self):
        """Gets the project_catalogues of this ServiceSpecificationDto.  # noqa: E501

        These are Catalogue that are used within this ElementContainerBase. Catalogue references are used to describe catalogues, or collections, that can be used to describe elements with commonly known properties. For example, QuantityAssignments use these to categorize themselves.  # noqa: E501

        :return: The project_catalogues of this ServiceSpecificationDto.  # noqa: E501
        :rtype: list[CatalogueDto]
        """
        return self._project_catalogues

    @project_catalogues.setter
    def project_catalogues(self, project_catalogues):
        """Sets the project_catalogues of this ServiceSpecificationDto.

        These are Catalogue that are used within this ElementContainerBase. Catalogue references are used to describe catalogues, or collections, that can be used to describe elements with commonly known properties. For example, QuantityAssignments use these to categorize themselves.  # noqa: E501

        :param project_catalogues: The project_catalogues of this ServiceSpecificationDto.  # noqa: E501
        :type: list[CatalogueDto]
        """

        self._project_catalogues = project_catalogues

    @property
    def catalogue_references(self):
        """Gets the catalogue_references of this ServiceSpecificationDto.  # noqa: E501

        Referenced catalogues for this ElementContainerBase.  # noqa: E501

        :return: The catalogue_references of this ServiceSpecificationDto.  # noqa: E501
        :rtype: list[CatalogueReferenceDto]
        """
        return self._catalogue_references

    @catalogue_references.setter
    def catalogue_references(self, catalogue_references):
        """Sets the catalogue_references of this ServiceSpecificationDto.

        Referenced catalogues for this ElementContainerBase.  # noqa: E501

        :param catalogue_references: The catalogue_references of this ServiceSpecificationDto.  # noqa: E501
        :type: list[CatalogueReferenceDto]
        """

        self._catalogue_references = catalogue_references

    @property
    def planned_execution_start(self):
        """Gets the planned_execution_start of this ServiceSpecificationDto.  # noqa: E501

        The date when the execution of the services is scheduled to start  # noqa: E501

        :return: The planned_execution_start of this ServiceSpecificationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_execution_start

    @planned_execution_start.setter
    def planned_execution_start(self, planned_execution_start):
        """Sets the planned_execution_start of this ServiceSpecificationDto.

        The date when the execution of the services is scheduled to start  # noqa: E501

        :param planned_execution_start: The planned_execution_start of this ServiceSpecificationDto.  # noqa: E501
        :type: datetime
        """

        self._planned_execution_start = planned_execution_start

    @property
    def planned_execution_end(self):
        """Gets the planned_execution_end of this ServiceSpecificationDto.  # noqa: E501

        The date then the execution of the services is scheduled to be finished  # noqa: E501

        :return: The planned_execution_end of this ServiceSpecificationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_execution_end

    @planned_execution_end.setter
    def planned_execution_end(self, planned_execution_end):
        """Sets the planned_execution_end of this ServiceSpecificationDto.

        The date then the execution of the services is scheduled to be finished  # noqa: E501

        :param planned_execution_end: The planned_execution_end of this ServiceSpecificationDto.  # noqa: E501
        :type: datetime
        """

        self._planned_execution_end = planned_execution_end

    @property
    def contract_date(self):
        """Gets the contract_date of this ServiceSpecificationDto.  # noqa: E501

        The date on which the contract has been awarded. This matches \"Auftragsdatum\" in GAEB  # noqa: E501

        :return: The contract_date of this ServiceSpecificationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._contract_date

    @contract_date.setter
    def contract_date(self, contract_date):
        """Sets the contract_date of this ServiceSpecificationDto.

        The date on which the contract has been awarded. This matches \"Auftragsdatum\" in GAEB  # noqa: E501

        :param contract_date: The contract_date of this ServiceSpecificationDto.  # noqa: E501
        :type: datetime
        """

        self._contract_date = contract_date

    @property
    def contract_identifier(self):
        """Gets the contract_identifier of this ServiceSpecificationDto.  # noqa: E501

        This value can be used to indicate the number or identifier of the contract. It matches \"Auftragsnummer\" in GAEB  # noqa: E501

        :return: The contract_identifier of this ServiceSpecificationDto.  # noqa: E501
        :rtype: str
        """
        return self._contract_identifier

    @contract_identifier.setter
    def contract_identifier(self, contract_identifier):
        """Sets the contract_identifier of this ServiceSpecificationDto.

        This value can be used to indicate the number or identifier of the contract. It matches \"Auftragsnummer\" in GAEB  # noqa: E501

        :param contract_identifier: The contract_identifier of this ServiceSpecificationDto.  # noqa: E501
        :type: str
        """

        self._contract_identifier = contract_identifier

    @property
    def warranty_duration(self):
        """Gets the warranty_duration of this ServiceSpecificationDto.  # noqa: E501

        This indicates how long the warranty period is for this ServiceSpecification  # noqa: E501

        :return: The warranty_duration of this ServiceSpecificationDto.  # noqa: E501
        :rtype: WarrantyDurationDto
        """
        return self._warranty_duration

    @warranty_duration.setter
    def warranty_duration(self, warranty_duration):
        """Sets the warranty_duration of this ServiceSpecificationDto.

        This indicates how long the warranty period is for this ServiceSpecification  # noqa: E501

        :param warranty_duration: The warranty_duration of this ServiceSpecificationDto.  # noqa: E501
        :type: WarrantyDurationDto
        """

        self._warranty_duration = warranty_duration

    @property
    def warranty_end(self):
        """Gets the warranty_end of this ServiceSpecificationDto.  # noqa: E501

        The date on which the warranty period ends  # noqa: E501

        :return: The warranty_end of this ServiceSpecificationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._warranty_end

    @warranty_end.setter
    def warranty_end(self, warranty_end):
        """Sets the warranty_end of this ServiceSpecificationDto.

        The date on which the warranty period ends  # noqa: E501

        :param warranty_end: The warranty_end of this ServiceSpecificationDto.  # noqa: E501
        :type: datetime
        """

        self._warranty_end = warranty_end

    @property
    def approval_date(self):
        """Gets the approval_date of this ServiceSpecificationDto.  # noqa: E501

        The date on which the services rendered by the bidder are scheduled to be approved by the buyer  # noqa: E501

        :return: The approval_date of this ServiceSpecificationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._approval_date

    @approval_date.setter
    def approval_date(self, approval_date):
        """Sets the approval_date of this ServiceSpecificationDto.

        The date on which the services rendered by the bidder are scheduled to be approved by the buyer  # noqa: E501

        :param approval_date: The approval_date of this ServiceSpecificationDto.  # noqa: E501
        :type: datetime
        """

        self._approval_date = approval_date

    @property
    def type_of_approval(self):
        """Gets the type_of_approval of this ServiceSpecificationDto.  # noqa: E501

        This should specify how the approval is performed by the buyer. This matches \"AcceptType\" in GAEB  # noqa: E501

        :return: The type_of_approval of this ServiceSpecificationDto.  # noqa: E501
        :rtype: str
        """
        return self._type_of_approval

    @type_of_approval.setter
    def type_of_approval(self, type_of_approval):
        """Sets the type_of_approval of this ServiceSpecificationDto.

        This should specify how the approval is performed by the buyer. This matches \"AcceptType\" in GAEB  # noqa: E501

        :param type_of_approval: The type_of_approval of this ServiceSpecificationDto.  # noqa: E501
        :type: str
        """

        self._type_of_approval = type_of_approval

    @property
    def addendum_number(self):
        """Gets the addendum_number of this ServiceSpecificationDto.  # noqa: E501

        This optional string property is shared by all IElements, and indicates if the element is part of an addendum, a 'Nachtrag' in German.  # noqa: E501

        :return: The addendum_number of this ServiceSpecificationDto.  # noqa: E501
        :rtype: str
        """
        return self._addendum_number

    @addendum_number.setter
    def addendum_number(self, addendum_number):
        """Sets the addendum_number of this ServiceSpecificationDto.

        This optional string property is shared by all IElements, and indicates if the element is part of an addendum, a 'Nachtrag' in German.  # noqa: E501

        :param addendum_number: The addendum_number of this ServiceSpecificationDto.  # noqa: E501
        :type: str
        """

        self._addendum_number = addendum_number

    @property
    def addendum_status(self):
        """Gets the addendum_status of this ServiceSpecificationDto.  # noqa: E501

        This indicates, if this element is part of an addendum an, if yes, with what status.  # noqa: E501

        :return: The addendum_status of this ServiceSpecificationDto.  # noqa: E501
        :rtype: AddendumStatusDto
        """
        return self._addendum_status

    @addendum_status.setter
    def addendum_status(self, addendum_status):
        """Sets the addendum_status of this ServiceSpecificationDto.

        This indicates, if this element is part of an addendum an, if yes, with what status.  # noqa: E501

        :param addendum_status: The addendum_status of this ServiceSpecificationDto.  # noqa: E501
        :type: AddendumStatusDto
        """

        self._addendum_status = addendum_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(ServiceSpecificationDto, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceSpecificationDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceSpecificationDto):
            return True

        return self.to_dict() != other.to_dict()

