# coding: utf-8

"""
    AVACloud API 1.52.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.52.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class PositionHoldOutPropertiesDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'hold_out_type': 'HoldOutTypeDto',
        'hold_out_duration': 'float',
        'hold_out_duration_unit': 'HoldOutDurationUnitDto',
        'base_position_references': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'hold_out_type': 'holdOutType',
        'hold_out_duration': 'holdOutDuration',
        'hold_out_duration_unit': 'holdOutDurationUnit',
        'base_position_references': 'basePositionReferences'
    }

    def __init__(self, id=None, hold_out_type=None, hold_out_duration=None, hold_out_duration_unit=None, base_position_references=None, _configuration=None):  # noqa: E501
        """PositionHoldOutPropertiesDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._hold_out_type = None
        self._hold_out_duration = None
        self._hold_out_duration_unit = None
        self._base_position_references = None
        self.discriminator = None

        self.id = id
        self.hold_out_type = hold_out_type
        self.hold_out_duration = hold_out_duration
        self.hold_out_duration_unit = hold_out_duration_unit
        if base_position_references is not None:
            self.base_position_references = base_position_references

    @property
    def id(self):
        """Gets the id of this PositionHoldOutPropertiesDto.  # noqa: E501

        Elements GUID identifier.  # noqa: E501

        :return: The id of this PositionHoldOutPropertiesDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PositionHoldOutPropertiesDto.

        Elements GUID identifier.  # noqa: E501

        :param id: The id of this PositionHoldOutPropertiesDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def hold_out_type(self):
        """Gets the hold_out_type of this PositionHoldOutPropertiesDto.  # noqa: E501

        The actual type  # noqa: E501

        :return: The hold_out_type of this PositionHoldOutPropertiesDto.  # noqa: E501
        :rtype: HoldOutTypeDto
        """
        return self._hold_out_type

    @hold_out_type.setter
    def hold_out_type(self, hold_out_type):
        """Sets the hold_out_type of this PositionHoldOutPropertiesDto.

        The actual type  # noqa: E501

        :param hold_out_type: The hold_out_type of this PositionHoldOutPropertiesDto.  # noqa: E501
        :type: HoldOutTypeDto
        """
        if self._configuration.client_side_validation and hold_out_type is None:
            raise ValueError("Invalid value for `hold_out_type`, must not be `None`")  # noqa: E501

        self._hold_out_type = hold_out_type

    @property
    def hold_out_duration(self):
        """Gets the hold_out_duration of this PositionHoldOutPropertiesDto.  # noqa: E501

        The duration of the period  # noqa: E501

        :return: The hold_out_duration of this PositionHoldOutPropertiesDto.  # noqa: E501
        :rtype: float
        """
        return self._hold_out_duration

    @hold_out_duration.setter
    def hold_out_duration(self, hold_out_duration):
        """Sets the hold_out_duration of this PositionHoldOutPropertiesDto.

        The duration of the period  # noqa: E501

        :param hold_out_duration: The hold_out_duration of this PositionHoldOutPropertiesDto.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and hold_out_duration is None:
            raise ValueError("Invalid value for `hold_out_duration`, must not be `None`")  # noqa: E501

        self._hold_out_duration = hold_out_duration

    @property
    def hold_out_duration_unit(self):
        """Gets the hold_out_duration_unit of this PositionHoldOutPropertiesDto.  # noqa: E501

        The time unit of the period  # noqa: E501

        :return: The hold_out_duration_unit of this PositionHoldOutPropertiesDto.  # noqa: E501
        :rtype: HoldOutDurationUnitDto
        """
        return self._hold_out_duration_unit

    @hold_out_duration_unit.setter
    def hold_out_duration_unit(self, hold_out_duration_unit):
        """Sets the hold_out_duration_unit of this PositionHoldOutPropertiesDto.

        The time unit of the period  # noqa: E501

        :param hold_out_duration_unit: The hold_out_duration_unit of this PositionHoldOutPropertiesDto.  # noqa: E501
        :type: HoldOutDurationUnitDto
        """
        if self._configuration.client_side_validation and hold_out_duration_unit is None:
            raise ValueError("Invalid value for `hold_out_duration_unit`, must not be `None`")  # noqa: E501

        self._hold_out_duration_unit = hold_out_duration_unit

    @property
    def base_position_references(self):
        """Gets the base_position_references of this PositionHoldOutPropertiesDto.  # noqa: E501

        References to base positions  # noqa: E501

        :return: The base_position_references of this PositionHoldOutPropertiesDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._base_position_references

    @base_position_references.setter
    def base_position_references(self, base_position_references):
        """Sets the base_position_references of this PositionHoldOutPropertiesDto.

        References to base positions  # noqa: E501

        :param base_position_references: The base_position_references of this PositionHoldOutPropertiesDto.  # noqa: E501
        :type: list[str]
        """

        self._base_position_references = base_position_references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(PositionHoldOutPropertiesDto, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionHoldOutPropertiesDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PositionHoldOutPropertiesDto):
            return True

        return self.to_dict() != other.to_dict()
