# coding: utf-8

"""
    AVACloud API 1.52.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.52.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class PriceCatalogueDataDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'unit_price_from': 'float',
        'unit_price_to': 'float',
        'unit_price_average': 'float',
        'wage_price_from': 'float',
        'wage_price_to': 'float',
        'wage_price_average': 'float'
    }

    attribute_map = {
        'id': 'id',
        'unit_price_from': 'unitPriceFrom',
        'unit_price_to': 'unitPriceTo',
        'unit_price_average': 'unitPriceAverage',
        'wage_price_from': 'wagePriceFrom',
        'wage_price_to': 'wagePriceTo',
        'wage_price_average': 'wagePriceAverage'
    }

    def __init__(self, id=None, unit_price_from=None, unit_price_to=None, unit_price_average=None, wage_price_from=None, wage_price_to=None, wage_price_average=None, _configuration=None):  # noqa: E501
        """PriceCatalogueDataDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._unit_price_from = None
        self._unit_price_to = None
        self._unit_price_average = None
        self._wage_price_from = None
        self._wage_price_to = None
        self._wage_price_average = None
        self.discriminator = None

        self.id = id
        if unit_price_from is not None:
            self.unit_price_from = unit_price_from
        if unit_price_to is not None:
            self.unit_price_to = unit_price_to
        if unit_price_average is not None:
            self.unit_price_average = unit_price_average
        if wage_price_from is not None:
            self.wage_price_from = wage_price_from
        if wage_price_to is not None:
            self.wage_price_to = wage_price_to
        if wage_price_average is not None:
            self.wage_price_average = wage_price_average

    @property
    def id(self):
        """Gets the id of this PriceCatalogueDataDto.  # noqa: E501

        Elements GUID identifier.  # noqa: E501

        :return: The id of this PriceCatalogueDataDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PriceCatalogueDataDto.

        Elements GUID identifier.  # noqa: E501

        :param id: The id of this PriceCatalogueDataDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def unit_price_from(self):
        """Gets the unit_price_from of this PriceCatalogueDataDto.  # noqa: E501

        The lower bound of the unit price  # noqa: E501

        :return: The unit_price_from of this PriceCatalogueDataDto.  # noqa: E501
        :rtype: float
        """
        return self._unit_price_from

    @unit_price_from.setter
    def unit_price_from(self, unit_price_from):
        """Sets the unit_price_from of this PriceCatalogueDataDto.

        The lower bound of the unit price  # noqa: E501

        :param unit_price_from: The unit_price_from of this PriceCatalogueDataDto.  # noqa: E501
        :type: float
        """

        self._unit_price_from = unit_price_from

    @property
    def unit_price_to(self):
        """Gets the unit_price_to of this PriceCatalogueDataDto.  # noqa: E501

        The upper bound of the unit price  # noqa: E501

        :return: The unit_price_to of this PriceCatalogueDataDto.  # noqa: E501
        :rtype: float
        """
        return self._unit_price_to

    @unit_price_to.setter
    def unit_price_to(self, unit_price_to):
        """Sets the unit_price_to of this PriceCatalogueDataDto.

        The upper bound of the unit price  # noqa: E501

        :param unit_price_to: The unit_price_to of this PriceCatalogueDataDto.  # noqa: E501
        :type: float
        """

        self._unit_price_to = unit_price_to

    @property
    def unit_price_average(self):
        """Gets the unit_price_average of this PriceCatalogueDataDto.  # noqa: E501

        The average unit price  # noqa: E501

        :return: The unit_price_average of this PriceCatalogueDataDto.  # noqa: E501
        :rtype: float
        """
        return self._unit_price_average

    @unit_price_average.setter
    def unit_price_average(self, unit_price_average):
        """Sets the unit_price_average of this PriceCatalogueDataDto.

        The average unit price  # noqa: E501

        :param unit_price_average: The unit_price_average of this PriceCatalogueDataDto.  # noqa: E501
        :type: float
        """

        self._unit_price_average = unit_price_average

    @property
    def wage_price_from(self):
        """Gets the wage_price_from of this PriceCatalogueDataDto.  # noqa: E501

        The lower bound of the wage price  # noqa: E501

        :return: The wage_price_from of this PriceCatalogueDataDto.  # noqa: E501
        :rtype: float
        """
        return self._wage_price_from

    @wage_price_from.setter
    def wage_price_from(self, wage_price_from):
        """Sets the wage_price_from of this PriceCatalogueDataDto.

        The lower bound of the wage price  # noqa: E501

        :param wage_price_from: The wage_price_from of this PriceCatalogueDataDto.  # noqa: E501
        :type: float
        """

        self._wage_price_from = wage_price_from

    @property
    def wage_price_to(self):
        """Gets the wage_price_to of this PriceCatalogueDataDto.  # noqa: E501

        The upper bound of the wage price  # noqa: E501

        :return: The wage_price_to of this PriceCatalogueDataDto.  # noqa: E501
        :rtype: float
        """
        return self._wage_price_to

    @wage_price_to.setter
    def wage_price_to(self, wage_price_to):
        """Sets the wage_price_to of this PriceCatalogueDataDto.

        The upper bound of the wage price  # noqa: E501

        :param wage_price_to: The wage_price_to of this PriceCatalogueDataDto.  # noqa: E501
        :type: float
        """

        self._wage_price_to = wage_price_to

    @property
    def wage_price_average(self):
        """Gets the wage_price_average of this PriceCatalogueDataDto.  # noqa: E501

        The average wage price  # noqa: E501

        :return: The wage_price_average of this PriceCatalogueDataDto.  # noqa: E501
        :rtype: float
        """
        return self._wage_price_average

    @wage_price_average.setter
    def wage_price_average(self, wage_price_average):
        """Sets the wage_price_average of this PriceCatalogueDataDto.

        The average wage price  # noqa: E501

        :param wage_price_average: The wage_price_average of this PriceCatalogueDataDto.  # noqa: E501
        :type: float
        """

        self._wage_price_average = wage_price_average

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PriceCatalogueDataDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PriceCatalogueDataDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PriceCatalogueDataDto):
            return True

        return self.to_dict() != other.to_dict()
