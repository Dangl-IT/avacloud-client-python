# coding: utf-8

"""
    AVACloud API 1.52.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.52.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class References(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'buyer_reference': 'str',
        'project_reference': 'str',
        'contract_reference': 'str',
        'purchase_order_reference': 'str',
        'sales_order_reference': 'str',
        'receiving_advice_reference': 'str',
        'dispatch_advice_reference': 'str',
        'tender_or_lot_reference': 'str',
        'invoiced_object_identifier': 'str'
    }

    attribute_map = {
        'buyer_reference': 'buyerReference',
        'project_reference': 'projectReference',
        'contract_reference': 'contractReference',
        'purchase_order_reference': 'purchaseOrderReference',
        'sales_order_reference': 'salesOrderReference',
        'receiving_advice_reference': 'receivingAdviceReference',
        'dispatch_advice_reference': 'dispatchAdviceReference',
        'tender_or_lot_reference': 'tenderOrLotReference',
        'invoiced_object_identifier': 'invoicedObjectIdentifier'
    }

    def __init__(self, buyer_reference=None, project_reference=None, contract_reference=None, purchase_order_reference=None, sales_order_reference=None, receiving_advice_reference=None, dispatch_advice_reference=None, tender_or_lot_reference=None, invoiced_object_identifier=None, _configuration=None):  # noqa: E501
        """References - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._buyer_reference = None
        self._project_reference = None
        self._contract_reference = None
        self._purchase_order_reference = None
        self._sales_order_reference = None
        self._receiving_advice_reference = None
        self._dispatch_advice_reference = None
        self._tender_or_lot_reference = None
        self._invoiced_object_identifier = None
        self.discriminator = None

        if buyer_reference is not None:
            self.buyer_reference = buyer_reference
        if project_reference is not None:
            self.project_reference = project_reference
        if contract_reference is not None:
            self.contract_reference = contract_reference
        if purchase_order_reference is not None:
            self.purchase_order_reference = purchase_order_reference
        if sales_order_reference is not None:
            self.sales_order_reference = sales_order_reference
        if receiving_advice_reference is not None:
            self.receiving_advice_reference = receiving_advice_reference
        if dispatch_advice_reference is not None:
            self.dispatch_advice_reference = dispatch_advice_reference
        if tender_or_lot_reference is not None:
            self.tender_or_lot_reference = tender_or_lot_reference
        if invoiced_object_identifier is not None:
            self.invoiced_object_identifier = invoiced_object_identifier

    @property
    def buyer_reference(self):
        """Gets the buyer_reference of this References.  # noqa: E501


        :return: The buyer_reference of this References.  # noqa: E501
        :rtype: str
        """
        return self._buyer_reference

    @buyer_reference.setter
    def buyer_reference(self, buyer_reference):
        """Sets the buyer_reference of this References.


        :param buyer_reference: The buyer_reference of this References.  # noqa: E501
        :type: str
        """

        self._buyer_reference = buyer_reference

    @property
    def project_reference(self):
        """Gets the project_reference of this References.  # noqa: E501


        :return: The project_reference of this References.  # noqa: E501
        :rtype: str
        """
        return self._project_reference

    @project_reference.setter
    def project_reference(self, project_reference):
        """Sets the project_reference of this References.


        :param project_reference: The project_reference of this References.  # noqa: E501
        :type: str
        """

        self._project_reference = project_reference

    @property
    def contract_reference(self):
        """Gets the contract_reference of this References.  # noqa: E501


        :return: The contract_reference of this References.  # noqa: E501
        :rtype: str
        """
        return self._contract_reference

    @contract_reference.setter
    def contract_reference(self, contract_reference):
        """Sets the contract_reference of this References.


        :param contract_reference: The contract_reference of this References.  # noqa: E501
        :type: str
        """

        self._contract_reference = contract_reference

    @property
    def purchase_order_reference(self):
        """Gets the purchase_order_reference of this References.  # noqa: E501


        :return: The purchase_order_reference of this References.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_reference

    @purchase_order_reference.setter
    def purchase_order_reference(self, purchase_order_reference):
        """Sets the purchase_order_reference of this References.


        :param purchase_order_reference: The purchase_order_reference of this References.  # noqa: E501
        :type: str
        """

        self._purchase_order_reference = purchase_order_reference

    @property
    def sales_order_reference(self):
        """Gets the sales_order_reference of this References.  # noqa: E501


        :return: The sales_order_reference of this References.  # noqa: E501
        :rtype: str
        """
        return self._sales_order_reference

    @sales_order_reference.setter
    def sales_order_reference(self, sales_order_reference):
        """Sets the sales_order_reference of this References.


        :param sales_order_reference: The sales_order_reference of this References.  # noqa: E501
        :type: str
        """

        self._sales_order_reference = sales_order_reference

    @property
    def receiving_advice_reference(self):
        """Gets the receiving_advice_reference of this References.  # noqa: E501


        :return: The receiving_advice_reference of this References.  # noqa: E501
        :rtype: str
        """
        return self._receiving_advice_reference

    @receiving_advice_reference.setter
    def receiving_advice_reference(self, receiving_advice_reference):
        """Sets the receiving_advice_reference of this References.


        :param receiving_advice_reference: The receiving_advice_reference of this References.  # noqa: E501
        :type: str
        """

        self._receiving_advice_reference = receiving_advice_reference

    @property
    def dispatch_advice_reference(self):
        """Gets the dispatch_advice_reference of this References.  # noqa: E501


        :return: The dispatch_advice_reference of this References.  # noqa: E501
        :rtype: str
        """
        return self._dispatch_advice_reference

    @dispatch_advice_reference.setter
    def dispatch_advice_reference(self, dispatch_advice_reference):
        """Sets the dispatch_advice_reference of this References.


        :param dispatch_advice_reference: The dispatch_advice_reference of this References.  # noqa: E501
        :type: str
        """

        self._dispatch_advice_reference = dispatch_advice_reference

    @property
    def tender_or_lot_reference(self):
        """Gets the tender_or_lot_reference of this References.  # noqa: E501


        :return: The tender_or_lot_reference of this References.  # noqa: E501
        :rtype: str
        """
        return self._tender_or_lot_reference

    @tender_or_lot_reference.setter
    def tender_or_lot_reference(self, tender_or_lot_reference):
        """Sets the tender_or_lot_reference of this References.


        :param tender_or_lot_reference: The tender_or_lot_reference of this References.  # noqa: E501
        :type: str
        """

        self._tender_or_lot_reference = tender_or_lot_reference

    @property
    def invoiced_object_identifier(self):
        """Gets the invoiced_object_identifier of this References.  # noqa: E501


        :return: The invoiced_object_identifier of this References.  # noqa: E501
        :rtype: str
        """
        return self._invoiced_object_identifier

    @invoiced_object_identifier.setter
    def invoiced_object_identifier(self, invoiced_object_identifier):
        """Sets the invoiced_object_identifier of this References.


        :param invoiced_object_identifier: The invoiced_object_identifier of this References.  # noqa: E501
        :type: str
        """

        self._invoiced_object_identifier = invoiced_object_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(References, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, References):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, References):
            return True

        return self.to_dict() != other.to_dict()
