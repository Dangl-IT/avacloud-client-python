# coding: utf-8

"""
    AVACloud API 1.52.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.52.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class PartyInformationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'street': 'str',
        'zip_code': 'str',
        'city': 'str',
        'country': 'str',
        'identifier': 'str',
        'remarks': 'str',
        'email': 'str',
        'phone': 'str',
        'contact_person_name': 'str',
        'award_identifier': 'str',
        'is_in_european_economic_area': 'bool',
        'vat_id': 'str',
        'fax': 'str',
        'country_code': 'str',
        'creditor_or_debtor_identifier': 'str',
        'global_location_number': 'str',
        'banking_information': 'list[BankingInformationDto]',
        'registration_number': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'street': 'street',
        'zip_code': 'zipCode',
        'city': 'city',
        'country': 'country',
        'identifier': 'identifier',
        'remarks': 'remarks',
        'email': 'email',
        'phone': 'phone',
        'contact_person_name': 'contactPersonName',
        'award_identifier': 'awardIdentifier',
        'is_in_european_economic_area': 'isInEuropeanEconomicArea',
        'vat_id': 'vatId',
        'fax': 'fax',
        'country_code': 'countryCode',
        'creditor_or_debtor_identifier': 'creditorOrDebtorIdentifier',
        'global_location_number': 'globalLocationNumber',
        'banking_information': 'bankingInformation',
        'registration_number': 'registrationNumber'
    }

    def __init__(self, id=None, name=None, street=None, zip_code=None, city=None, country=None, identifier=None, remarks=None, email=None, phone=None, contact_person_name=None, award_identifier=None, is_in_european_economic_area=None, vat_id=None, fax=None, country_code=None, creditor_or_debtor_identifier=None, global_location_number=None, banking_information=None, registration_number=None, _configuration=None):  # noqa: E501
        """PartyInformationDto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._street = None
        self._zip_code = None
        self._city = None
        self._country = None
        self._identifier = None
        self._remarks = None
        self._email = None
        self._phone = None
        self._contact_person_name = None
        self._award_identifier = None
        self._is_in_european_economic_area = None
        self._vat_id = None
        self._fax = None
        self._country_code = None
        self._creditor_or_debtor_identifier = None
        self._global_location_number = None
        self._banking_information = None
        self._registration_number = None
        self.discriminator = None

        self.id = id
        if name is not None:
            self.name = name
        if street is not None:
            self.street = street
        if zip_code is not None:
            self.zip_code = zip_code
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if identifier is not None:
            self.identifier = identifier
        if remarks is not None:
            self.remarks = remarks
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if contact_person_name is not None:
            self.contact_person_name = contact_person_name
        if award_identifier is not None:
            self.award_identifier = award_identifier
        self.is_in_european_economic_area = is_in_european_economic_area
        if vat_id is not None:
            self.vat_id = vat_id
        if fax is not None:
            self.fax = fax
        if country_code is not None:
            self.country_code = country_code
        if creditor_or_debtor_identifier is not None:
            self.creditor_or_debtor_identifier = creditor_or_debtor_identifier
        if global_location_number is not None:
            self.global_location_number = global_location_number
        if banking_information is not None:
            self.banking_information = banking_information
        if registration_number is not None:
            self.registration_number = registration_number

    @property
    def id(self):
        """Gets the id of this PartyInformationDto.  # noqa: E501

        Elements GUID identifier.  # noqa: E501

        :return: The id of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PartyInformationDto.

        Elements GUID identifier.  # noqa: E501

        :param id: The id of this PartyInformationDto.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this PartyInformationDto.  # noqa: E501

        This party's name.  # noqa: E501

        :return: The name of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PartyInformationDto.

        This party's name.  # noqa: E501

        :param name: The name of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def street(self):
        """Gets the street of this PartyInformationDto.  # noqa: E501

        This party's street.  # noqa: E501

        :return: The street of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this PartyInformationDto.

        This party's street.  # noqa: E501

        :param street: The street of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def zip_code(self):
        """Gets the zip_code of this PartyInformationDto.  # noqa: E501

        This party's ZipCode.  # noqa: E501

        :return: The zip_code of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this PartyInformationDto.

        This party's ZipCode.  # noqa: E501

        :param zip_code: The zip_code of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def city(self):
        """Gets the city of this PartyInformationDto.  # noqa: E501

        This party's City.  # noqa: E501

        :return: The city of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this PartyInformationDto.

        This party's City.  # noqa: E501

        :param city: The city of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this PartyInformationDto.  # noqa: E501

        This party's Country.  # noqa: E501

        :return: The country of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PartyInformationDto.

        This party's Country.  # noqa: E501

        :param country: The country of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def identifier(self):
        """Gets the identifier of this PartyInformationDto.  # noqa: E501

        This party's Identifier.  # noqa: E501

        :return: The identifier of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PartyInformationDto.

        This party's Identifier.  # noqa: E501

        :param identifier: The identifier of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def remarks(self):
        """Gets the remarks of this PartyInformationDto.  # noqa: E501

        Remarks for this party.  # noqa: E501

        :return: The remarks of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this PartyInformationDto.

        Remarks for this party.  # noqa: E501

        :param remarks: The remarks of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def email(self):
        """Gets the email of this PartyInformationDto.  # noqa: E501

        An email address for this party.  # noqa: E501

        :return: The email of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PartyInformationDto.

        An email address for this party.  # noqa: E501

        :param email: The email of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this PartyInformationDto.  # noqa: E501

        A phone number for this party.  # noqa: E501

        :return: The phone of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this PartyInformationDto.

        A phone number for this party.  # noqa: E501

        :param phone: The phone of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def contact_person_name(self):
        """Gets the contact_person_name of this PartyInformationDto.  # noqa: E501

        The name of a contact person.  # noqa: E501

        :return: The contact_person_name of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._contact_person_name

    @contact_person_name.setter
    def contact_person_name(self, contact_person_name):
        """Sets the contact_person_name of this PartyInformationDto.

        The name of a contact person.  # noqa: E501

        :param contact_person_name: The contact_person_name of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._contact_person_name = contact_person_name

    @property
    def award_identifier(self):
        """Gets the award_identifier of this PartyInformationDto.  # noqa: E501

        This is an identifier related to this PartyInformation and their internal reference of the tender (or award). This might be used to assign an identifier (German \"Vergabenummer\") for the current project. This is typically only used in Buyer and Bidder representations and should map to the concept of \"Vergabenummer\" or \"AwardNo\" in GAEB.  # noqa: E501

        :return: The award_identifier of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._award_identifier

    @award_identifier.setter
    def award_identifier(self, award_identifier):
        """Sets the award_identifier of this PartyInformationDto.

        This is an identifier related to this PartyInformation and their internal reference of the tender (or award). This might be used to assign an identifier (German \"Vergabenummer\") for the current project. This is typically only used in Buyer and Bidder representations and should map to the concept of \"Vergabenummer\" or \"AwardNo\" in GAEB.  # noqa: E501

        :param award_identifier: The award_identifier of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._award_identifier = award_identifier

    @property
    def is_in_european_economic_area(self):
        """Gets the is_in_european_economic_area of this PartyInformationDto.  # noqa: E501

        This property indicates if the party is registered within the European Economic Area.  # noqa: E501

        :return: The is_in_european_economic_area of this PartyInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_european_economic_area

    @is_in_european_economic_area.setter
    def is_in_european_economic_area(self, is_in_european_economic_area):
        """Sets the is_in_european_economic_area of this PartyInformationDto.

        This property indicates if the party is registered within the European Economic Area.  # noqa: E501

        :param is_in_european_economic_area: The is_in_european_economic_area of this PartyInformationDto.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_in_european_economic_area is None:
            raise ValueError("Invalid value for `is_in_european_economic_area`, must not be `None`")  # noqa: E501

        self._is_in_european_economic_area = is_in_european_economic_area

    @property
    def vat_id(self):
        """Gets the vat_id of this PartyInformationDto.  # noqa: E501

        If this is within the European Economic Area (see IsInEuropeanEconomicArea, then as a business entity it likely has an EU VAT Id.  # noqa: E501

        :return: The vat_id of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._vat_id

    @vat_id.setter
    def vat_id(self, vat_id):
        """Sets the vat_id of this PartyInformationDto.

        If this is within the European Economic Area (see IsInEuropeanEconomicArea, then as a business entity it likely has an EU VAT Id.  # noqa: E501

        :param vat_id: The vat_id of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._vat_id = vat_id

    @property
    def fax(self):
        """Gets the fax of this PartyInformationDto.  # noqa: E501

        The fax number for this party.  # noqa: E501

        :return: The fax of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this PartyInformationDto.

        The fax number for this party.  # noqa: E501

        :param fax: The fax of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def country_code(self):
        """Gets the country_code of this PartyInformationDto.  # noqa: E501

        The two letter ISO country code, e.g. DE for Germany.  # noqa: E501

        :return: The country_code of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PartyInformationDto.

        The two letter ISO country code, e.g. DE for Germany.  # noqa: E501

        :param country_code: The country_code of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def creditor_or_debtor_identifier(self):
        """Gets the creditor_or_debtor_identifier of this PartyInformationDto.  # noqa: E501

        Depending on which party this class represents, it might have either a 'creditor' or 'debtor' number. This is often used in internal accounting systems.  # noqa: E501

        :return: The creditor_or_debtor_identifier of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._creditor_or_debtor_identifier

    @creditor_or_debtor_identifier.setter
    def creditor_or_debtor_identifier(self, creditor_or_debtor_identifier):
        """Sets the creditor_or_debtor_identifier of this PartyInformationDto.

        Depending on which party this class represents, it might have either a 'creditor' or 'debtor' number. This is often used in internal accounting systems.  # noqa: E501

        :param creditor_or_debtor_identifier: The creditor_or_debtor_identifier of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._creditor_or_debtor_identifier = creditor_or_debtor_identifier

    @property
    def global_location_number(self):
        """Gets the global_location_number of this PartyInformationDto.  # noqa: E501

        The Global Location Number (GLN) is issued by GS1 and is intended to be a unique identifier for the physical address of a party, e.g. a business office.  # noqa: E501

        :return: The global_location_number of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._global_location_number

    @global_location_number.setter
    def global_location_number(self, global_location_number):
        """Sets the global_location_number of this PartyInformationDto.

        The Global Location Number (GLN) is issued by GS1 and is intended to be a unique identifier for the physical address of a party, e.g. a business office.  # noqa: E501

        :param global_location_number: The global_location_number of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._global_location_number = global_location_number

    @property
    def banking_information(self):
        """Gets the banking_information of this PartyInformationDto.  # noqa: E501

        This list contains information about bank accounts associated with this PartyInformation. It's typically used for buyers and bidders.  # noqa: E501

        :return: The banking_information of this PartyInformationDto.  # noqa: E501
        :rtype: list[BankingInformationDto]
        """
        return self._banking_information

    @banking_information.setter
    def banking_information(self, banking_information):
        """Sets the banking_information of this PartyInformationDto.

        This list contains information about bank accounts associated with this PartyInformation. It's typically used for buyers and bidders.  # noqa: E501

        :param banking_information: The banking_information of this PartyInformationDto.  # noqa: E501
        :type: list[BankingInformationDto]
        """

        self._banking_information = banking_information

    @property
    def registration_number(self):
        """Gets the registration_number of this PartyInformationDto.  # noqa: E501

        This can be used to specify a registration number for this party, e.g. a company registration number. It is usually used in GAEB XML commerce exchanges for bidders to supply their WEEE registration number, which is used to identify them as a registered WEEE company.  # noqa: E501

        :return: The registration_number of this PartyInformationDto.  # noqa: E501
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this PartyInformationDto.

        This can be used to specify a registration number for this party, e.g. a company registration number. It is usually used in GAEB XML commerce exchanges for bidders to supply their WEEE registration number, which is used to identify them as a registered WEEE company.  # noqa: E501

        :param registration_number: The registration_number of this PartyInformationDto.  # noqa: E501
        :type: str
        """

        self._registration_number = registration_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(PartyInformationDto, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartyInformationDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PartyInformationDto):
            return True

        return self.to_dict() != other.to_dict()
