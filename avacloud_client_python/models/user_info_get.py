# coding: utf-8

"""
    AVACloud API 1.52.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.52.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class UserInfoGet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_is_authenticated': 'bool',
        'client_is_authenticated': 'bool',
        'current_user_id': 'str',
        'current_user_identicon_id': 'str',
        'current_user_name': 'str',
        'current_user_email': 'str',
        'current_client_id': 'str',
        'user_claims': 'list[ClaimGet]',
        'client_claims': 'list[ClaimGet]'
    }

    attribute_map = {
        'user_is_authenticated': 'userIsAuthenticated',
        'client_is_authenticated': 'clientIsAuthenticated',
        'current_user_id': 'currentUserId',
        'current_user_identicon_id': 'currentUserIdenticonId',
        'current_user_name': 'currentUserName',
        'current_user_email': 'currentUserEmail',
        'current_client_id': 'currentClientId',
        'user_claims': 'userClaims',
        'client_claims': 'clientClaims'
    }

    def __init__(self, user_is_authenticated=None, client_is_authenticated=None, current_user_id=None, current_user_identicon_id=None, current_user_name=None, current_user_email=None, current_client_id=None, user_claims=None, client_claims=None, _configuration=None):  # noqa: E501
        """UserInfoGet - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_is_authenticated = None
        self._client_is_authenticated = None
        self._current_user_id = None
        self._current_user_identicon_id = None
        self._current_user_name = None
        self._current_user_email = None
        self._current_client_id = None
        self._user_claims = None
        self._client_claims = None
        self.discriminator = None

        self.user_is_authenticated = user_is_authenticated
        self.client_is_authenticated = client_is_authenticated
        if current_user_id is not None:
            self.current_user_id = current_user_id
        if current_user_identicon_id is not None:
            self.current_user_identicon_id = current_user_identicon_id
        if current_user_name is not None:
            self.current_user_name = current_user_name
        if current_user_email is not None:
            self.current_user_email = current_user_email
        if current_client_id is not None:
            self.current_client_id = current_client_id
        if user_claims is not None:
            self.user_claims = user_claims
        if client_claims is not None:
            self.client_claims = client_claims

    @property
    def user_is_authenticated(self):
        """Gets the user_is_authenticated of this UserInfoGet.  # noqa: E501


        :return: The user_is_authenticated of this UserInfoGet.  # noqa: E501
        :rtype: bool
        """
        return self._user_is_authenticated

    @user_is_authenticated.setter
    def user_is_authenticated(self, user_is_authenticated):
        """Sets the user_is_authenticated of this UserInfoGet.


        :param user_is_authenticated: The user_is_authenticated of this UserInfoGet.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and user_is_authenticated is None:
            raise ValueError("Invalid value for `user_is_authenticated`, must not be `None`")  # noqa: E501

        self._user_is_authenticated = user_is_authenticated

    @property
    def client_is_authenticated(self):
        """Gets the client_is_authenticated of this UserInfoGet.  # noqa: E501


        :return: The client_is_authenticated of this UserInfoGet.  # noqa: E501
        :rtype: bool
        """
        return self._client_is_authenticated

    @client_is_authenticated.setter
    def client_is_authenticated(self, client_is_authenticated):
        """Sets the client_is_authenticated of this UserInfoGet.


        :param client_is_authenticated: The client_is_authenticated of this UserInfoGet.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and client_is_authenticated is None:
            raise ValueError("Invalid value for `client_is_authenticated`, must not be `None`")  # noqa: E501

        self._client_is_authenticated = client_is_authenticated

    @property
    def current_user_id(self):
        """Gets the current_user_id of this UserInfoGet.  # noqa: E501


        :return: The current_user_id of this UserInfoGet.  # noqa: E501
        :rtype: str
        """
        return self._current_user_id

    @current_user_id.setter
    def current_user_id(self, current_user_id):
        """Sets the current_user_id of this UserInfoGet.


        :param current_user_id: The current_user_id of this UserInfoGet.  # noqa: E501
        :type: str
        """

        self._current_user_id = current_user_id

    @property
    def current_user_identicon_id(self):
        """Gets the current_user_identicon_id of this UserInfoGet.  # noqa: E501


        :return: The current_user_identicon_id of this UserInfoGet.  # noqa: E501
        :rtype: str
        """
        return self._current_user_identicon_id

    @current_user_identicon_id.setter
    def current_user_identicon_id(self, current_user_identicon_id):
        """Sets the current_user_identicon_id of this UserInfoGet.


        :param current_user_identicon_id: The current_user_identicon_id of this UserInfoGet.  # noqa: E501
        :type: str
        """

        self._current_user_identicon_id = current_user_identicon_id

    @property
    def current_user_name(self):
        """Gets the current_user_name of this UserInfoGet.  # noqa: E501


        :return: The current_user_name of this UserInfoGet.  # noqa: E501
        :rtype: str
        """
        return self._current_user_name

    @current_user_name.setter
    def current_user_name(self, current_user_name):
        """Sets the current_user_name of this UserInfoGet.


        :param current_user_name: The current_user_name of this UserInfoGet.  # noqa: E501
        :type: str
        """

        self._current_user_name = current_user_name

    @property
    def current_user_email(self):
        """Gets the current_user_email of this UserInfoGet.  # noqa: E501


        :return: The current_user_email of this UserInfoGet.  # noqa: E501
        :rtype: str
        """
        return self._current_user_email

    @current_user_email.setter
    def current_user_email(self, current_user_email):
        """Sets the current_user_email of this UserInfoGet.


        :param current_user_email: The current_user_email of this UserInfoGet.  # noqa: E501
        :type: str
        """

        self._current_user_email = current_user_email

    @property
    def current_client_id(self):
        """Gets the current_client_id of this UserInfoGet.  # noqa: E501


        :return: The current_client_id of this UserInfoGet.  # noqa: E501
        :rtype: str
        """
        return self._current_client_id

    @current_client_id.setter
    def current_client_id(self, current_client_id):
        """Sets the current_client_id of this UserInfoGet.


        :param current_client_id: The current_client_id of this UserInfoGet.  # noqa: E501
        :type: str
        """

        self._current_client_id = current_client_id

    @property
    def user_claims(self):
        """Gets the user_claims of this UserInfoGet.  # noqa: E501


        :return: The user_claims of this UserInfoGet.  # noqa: E501
        :rtype: list[ClaimGet]
        """
        return self._user_claims

    @user_claims.setter
    def user_claims(self, user_claims):
        """Sets the user_claims of this UserInfoGet.


        :param user_claims: The user_claims of this UserInfoGet.  # noqa: E501
        :type: list[ClaimGet]
        """

        self._user_claims = user_claims

    @property
    def client_claims(self):
        """Gets the client_claims of this UserInfoGet.  # noqa: E501


        :return: The client_claims of this UserInfoGet.  # noqa: E501
        :rtype: list[ClaimGet]
        """
        return self._client_claims

    @client_claims.setter
    def client_claims(self, client_claims):
        """Sets the client_claims of this UserInfoGet.


        :param client_claims: The client_claims of this UserInfoGet.  # noqa: E501
        :type: list[ClaimGet]
        """

        self._client_claims = client_claims

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(UserInfoGet, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserInfoGet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserInfoGet):
            return True

        return self.to_dict() != other.to_dict()
