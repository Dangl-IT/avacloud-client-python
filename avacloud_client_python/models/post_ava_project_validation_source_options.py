# coding: utf-8

"""
    AVACloud API 1.41.0

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.41.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.configuration import Configuration


class PostAvaProjectValidationSourceOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ava_project': 'ProjectDto',
        'service_specification_index': 'int',
        'validation_type': 'ValidationType',
        'exchange_phase': 'ExchangePhaseDto',
        'ava_source_options': 'PostAvaSourceOptions',
        'oenorm_destination_options': 'PostOenormDestinationOptions',
        'gaeb_destination_options': 'PostGaebDestinationOptions'
    }

    attribute_map = {
        'ava_project': 'avaProject',
        'service_specification_index': 'serviceSpecificationIndex',
        'validation_type': 'validationType',
        'exchange_phase': 'exchangePhase',
        'ava_source_options': 'avaSourceOptions',
        'oenorm_destination_options': 'oenormDestinationOptions',
        'gaeb_destination_options': 'gaebDestinationOptions'
    }

    def __init__(self, ava_project=None, service_specification_index=None, validation_type=None, exchange_phase=None, ava_source_options=None, oenorm_destination_options=None, gaeb_destination_options=None, _configuration=None):  # noqa: E501
        """PostAvaProjectValidationSourceOptions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ava_project = None
        self._service_specification_index = None
        self._validation_type = None
        self._exchange_phase = None
        self._ava_source_options = None
        self._oenorm_destination_options = None
        self._gaeb_destination_options = None
        self.discriminator = None

        self.ava_project = ava_project
        if service_specification_index is not None:
            self.service_specification_index = service_specification_index
        self.validation_type = validation_type
        if exchange_phase is not None:
            self.exchange_phase = exchange_phase
        if ava_source_options is not None:
            self.ava_source_options = ava_source_options
        if oenorm_destination_options is not None:
            self.oenorm_destination_options = oenorm_destination_options
        if gaeb_destination_options is not None:
            self.gaeb_destination_options = gaeb_destination_options

    @property
    def ava_project(self):
        """Gets the ava_project of this PostAvaProjectValidationSourceOptions.  # noqa: E501

        The project that should be validated  # noqa: E501

        :return: The ava_project of this PostAvaProjectValidationSourceOptions.  # noqa: E501
        :rtype: ProjectDto
        """
        return self._ava_project

    @ava_project.setter
    def ava_project(self, ava_project):
        """Sets the ava_project of this PostAvaProjectValidationSourceOptions.

        The project that should be validated  # noqa: E501

        :param ava_project: The ava_project of this PostAvaProjectValidationSourceOptions.  # noqa: E501
        :type: ProjectDto
        """
        if self._configuration.client_side_validation and ava_project is None:
            raise ValueError("Invalid value for `ava_project`, must not be `None`")  # noqa: E501

        self._ava_project = ava_project

    @property
    def service_specification_index(self):
        """Gets the service_specification_index of this PostAvaProjectValidationSourceOptions.  # noqa: E501

        The index of the ServiceSpecification that should be validated. If not given, will default to the first one in the project.  # noqa: E501

        :return: The service_specification_index of this PostAvaProjectValidationSourceOptions.  # noqa: E501
        :rtype: int
        """
        return self._service_specification_index

    @service_specification_index.setter
    def service_specification_index(self, service_specification_index):
        """Sets the service_specification_index of this PostAvaProjectValidationSourceOptions.

        The index of the ServiceSpecification that should be validated. If not given, will default to the first one in the project.  # noqa: E501

        :param service_specification_index: The service_specification_index of this PostAvaProjectValidationSourceOptions.  # noqa: E501
        :type: int
        """

        self._service_specification_index = service_specification_index

    @property
    def validation_type(self):
        """Gets the validation_type of this PostAvaProjectValidationSourceOptions.  # noqa: E501

        This can optionally be specified to simulate a conversion to a specific target.  # noqa: E501

        :return: The validation_type of this PostAvaProjectValidationSourceOptions.  # noqa: E501
        :rtype: ValidationType
        """
        return self._validation_type

    @validation_type.setter
    def validation_type(self, validation_type):
        """Sets the validation_type of this PostAvaProjectValidationSourceOptions.

        This can optionally be specified to simulate a conversion to a specific target.  # noqa: E501

        :param validation_type: The validation_type of this PostAvaProjectValidationSourceOptions.  # noqa: E501
        :type: ValidationType
        """
        if self._configuration.client_side_validation and validation_type is None:
            raise ValueError("Invalid value for `validation_type`, must not be `None`")  # noqa: E501

        self._validation_type = validation_type

    @property
    def exchange_phase(self):
        """Gets the exchange_phase of this PostAvaProjectValidationSourceOptions.  # noqa: E501

        This can optionally be supplied to test for a specific exchange phase. For example, missing prices will only trigger errors in some specific exchange phases. Please note: If a conversion to a specific format, e.g. GAEB or ÖNorm, is given, this parameter is not applied to the internal conversion. The converter options must be set in the appropriate properties as well.  # noqa: E501

        :return: The exchange_phase of this PostAvaProjectValidationSourceOptions.  # noqa: E501
        :rtype: ExchangePhaseDto
        """
        return self._exchange_phase

    @exchange_phase.setter
    def exchange_phase(self, exchange_phase):
        """Sets the exchange_phase of this PostAvaProjectValidationSourceOptions.

        This can optionally be supplied to test for a specific exchange phase. For example, missing prices will only trigger errors in some specific exchange phases. Please note: If a conversion to a specific format, e.g. GAEB or ÖNorm, is given, this parameter is not applied to the internal conversion. The converter options must be set in the appropriate properties as well.  # noqa: E501

        :param exchange_phase: The exchange_phase of this PostAvaProjectValidationSourceOptions.  # noqa: E501
        :type: ExchangePhaseDto
        """

        self._exchange_phase = exchange_phase

    @property
    def ava_source_options(self):
        """Gets the ava_source_options of this PostAvaProjectValidationSourceOptions.  # noqa: E501

        Options for importing the AVA project  # noqa: E501

        :return: The ava_source_options of this PostAvaProjectValidationSourceOptions.  # noqa: E501
        :rtype: PostAvaSourceOptions
        """
        return self._ava_source_options

    @ava_source_options.setter
    def ava_source_options(self, ava_source_options):
        """Sets the ava_source_options of this PostAvaProjectValidationSourceOptions.

        Options for importing the AVA project  # noqa: E501

        :param ava_source_options: The ava_source_options of this PostAvaProjectValidationSourceOptions.  # noqa: E501
        :type: PostAvaSourceOptions
        """

        self._ava_source_options = ava_source_options

    @property
    def oenorm_destination_options(self):
        """Gets the oenorm_destination_options of this PostAvaProjectValidationSourceOptions.  # noqa: E501

        Options for conversion to Oenorm. Should be given if ValidationType is set to Oenorm.  # noqa: E501

        :return: The oenorm_destination_options of this PostAvaProjectValidationSourceOptions.  # noqa: E501
        :rtype: PostOenormDestinationOptions
        """
        return self._oenorm_destination_options

    @oenorm_destination_options.setter
    def oenorm_destination_options(self, oenorm_destination_options):
        """Sets the oenorm_destination_options of this PostAvaProjectValidationSourceOptions.

        Options for conversion to Oenorm. Should be given if ValidationType is set to Oenorm.  # noqa: E501

        :param oenorm_destination_options: The oenorm_destination_options of this PostAvaProjectValidationSourceOptions.  # noqa: E501
        :type: PostOenormDestinationOptions
        """

        self._oenorm_destination_options = oenorm_destination_options

    @property
    def gaeb_destination_options(self):
        """Gets the gaeb_destination_options of this PostAvaProjectValidationSourceOptions.  # noqa: E501

        Options for conversion to GAEB. Should be given if ValidationType is set to GAEB.  # noqa: E501

        :return: The gaeb_destination_options of this PostAvaProjectValidationSourceOptions.  # noqa: E501
        :rtype: PostGaebDestinationOptions
        """
        return self._gaeb_destination_options

    @gaeb_destination_options.setter
    def gaeb_destination_options(self, gaeb_destination_options):
        """Sets the gaeb_destination_options of this PostAvaProjectValidationSourceOptions.

        Options for conversion to GAEB. Should be given if ValidationType is set to GAEB.  # noqa: E501

        :param gaeb_destination_options: The gaeb_destination_options of this PostAvaProjectValidationSourceOptions.  # noqa: E501
        :type: PostGaebDestinationOptions
        """

        self._gaeb_destination_options = gaeb_destination_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list([x.to_dict() if hasattr(x, "to_dict") else x for x in value])
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict([(item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item for item in list(value.items())])
            else:
                result[attr] = value
        if issubclass(PostAvaProjectValidationSourceOptions, dict):
            for key, value in list(self.items()):
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostAvaProjectValidationSourceOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostAvaProjectValidationSourceOptions):
            return True

        return self.to_dict() != other.to_dict()

